{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Horizon Framework"},{"location":"#introduction","title":"Introduction","text":"<p>Horizon is a PHP web application framework largely inspired by Laravel 5. It was designed from the ground up to work on nearly all web servers, while offering most of the same features and a familiar development experience.</p> <p>Horizon is a great fit for distributed web applications, and works wonderfully on shared hosting. With no strict extension requirements, support for older PHP versions, dynamic subdirectory support, and automatic legacy routing, it can run pretty much anywhere.</p>"},{"location":"#quick_start","title":"Quick start","text":"<p>Clone one of the official starter templates and start developing in seconds. You can also install the framework manually or add it into an existing project to take advantage of its features.</p> <p>Get started Browse templates</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>You can find the configuration files in the <code>/app/config/</code> directory. Take a moment to look through the available files and options. Documentation for each option is available in comments.</p> File Description <code>app.php</code> Changes core app settings applied by the framework. <code>database.php</code> Sets the database configuration. <code>namespaces.php</code> Customizes the class autoloader. <code>providers.php</code> Sets service providers. <code>session.php</code> Changes the behavior and functionality of sessions. <code>updates.php</code> Configures settings for the update library."},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#installing_from_a_template","title":"Installing from a template","text":"<p>Horizon's repository offers two different starter templates suitable for different types of projects. The recommended means of initializing a new project is to use one of these templates.</p>"},{"location":"getting-started/installation/#shared_template","title":"Shared template","text":"<p>The shared starter is best for distributed applications that need to run in unpredictable environments. This starter works in subdirectories and does not need rewrite rules.</p> <pre><code>npx degit baileyherbert/horizon/starters/shared\ncomposer install -d horizon\n</code></pre>"},{"location":"getting-started/installation/#dedicated_template","title":"Dedicated template","text":"<p>The dedicated starter is best for private projects where the developer has full control of the environment or will be deploying with Docker. Traffic must be pointed to the <code>public</code> directory, and rewrite rules should always be enabled.</p> <pre><code>npx degit baileyherbert/horizon/starters/dedicated\ncomposer install\n</code></pre> <p>Note</p> <p>Horizon's documentation is largely based on the shared template, which uses a different file structure than the dedicated template. For example, while the shared template can have two different vendor directories, the dedicated template only has one.</p>"},{"location":"getting-started/installation/#installing_from_source","title":"Installing from source","text":"<p>The latest release can be fetched from the repository on GitHub. Download these files and extract them into your project's public directory. Next, open a terminal in the same directory, and run this command:</p> <pre><code>composer install -d horizon\n</code></pre>"},{"location":"getting-started/installation/#installing_the_ace_tool","title":"Installing the <code>ace</code> tool","text":"<p>Installing the <code>ace</code> command line tool globally is recommended to aid with development. This tool helps with generating new source files, building the app, running your own custom commands, and more.</p> <pre><code>composer global require baileyherbert/ace\n</code></pre>"},{"location":"getting-started/requirements/","title":"Requirements","text":""},{"location":"getting-started/requirements/#php","title":"PHP","text":"<p>Horizon supports PHP 5.6 and above. Older versions of PHP may still work but are not officially supported and should not be used.</p>"},{"location":"getting-started/requirements/#extensions","title":"Extensions","text":"<p>Horizon doesn't have any specific PHP extension requirements. However, the following extensions are highly recommended for improved performance:</p> <ul> <li><code>mbstring</code></li> <li><code>openssl</code></li> </ul> <p>For applications that use a MySQL database, the framework will automatically use the best of any available extensions, which includes:</p> <ul> <li><code>mysql</code></li> <li><code>mysqli</code></li> <li><code>pdo_mysql</code></li> </ul>"},{"location":"getting-started/requirements/#webserver","title":"Webserver","text":"<p>Horizon will run on any webserver as long as it meets the other requirements on this document. No special server configuration is required to use the framework.</p> <p>If <code>.htaccess</code> files are not supported in the environment, Horizon will automatically fall back to using legacy <code>.php</code> file-based routing. This is automatically applied and managed by the framework when links, routing, and building are all implemented correctly.</p>"},{"location":"getting-started/requirements/#filesystem","title":"Filesystem","text":"<p>Horizon can be installed into any public-facing directory on a supported server, including in subdirectories. The framework will detect that it's running in a subdirectory, and will adjust routing, links, and redirects accordingly.</p>"},{"location":"reference/architecture/autoloader/","title":"Autoloader","text":""},{"location":"reference/architecture/autoloader/#introduction","title":"Introduction","text":"<p>Horizon's autoloading is more complicated than other frameworks due to its support for shared hosting, extensions, and remote updates. It has its own global autoloader, and can have multiple separate vendor directories.</p>"},{"location":"reference/architecture/autoloader/#composer","title":"Composer","text":""},{"location":"reference/architecture/autoloader/#application_vendors","title":"Application vendors","text":"<p>Applications that use composer packages should have their own <code>app/composer.json</code> file. The framework automatically requires the <code>app/vendor/autoload.php</code> file if it exists.</p> <p>Warning</p> <p>Horizon has its own composer file at <code>horizon/composer.json</code>. However, this is an internal file that should never be modified. To add additional dependencies, you must initialize your own file at <code>app/composer.json</code>.</p>"},{"location":"reference/architecture/autoloader/#extension_vendors","title":"Extension vendors","text":"<p>Extensions should have their own composer installations and vendor directories. Note that these vendor autoloaders are not automatically required. Instead, extensions can import the autoloader file via the <code>files</code> configuration option. For example:</p> <pre><code>'files' =&gt; array(\n    'vendor/autoload.php'\n)\n</code></pre> <p>For more information on extensions and their configuration, refer to the extensions documentation.</p>"},{"location":"reference/architecture/autoloader/#namespaces","title":"Namespaces","text":"<p>The <code>config/namespaces.php</code> file specifies namespaces which will be \"mounted\" during startup. This file can be used to easily create new namespaces pointing to different source directories. The <code>App</code> namespace is registered through this file by default as well.</p> config/namespaces.php<pre><code>return array(\n    'map' =&gt; array(\n        'App\\\\' =&gt; '/app/src'\n    )\n);\n</code></pre>"},{"location":"reference/architecture/autoloader/#manual_mounting","title":"Manual mounting","text":"<p>To mount a namespace programatically, you can use the static <code>Autoloader</code> service. This is a foundation facade and its interface will not change in minor updates. You can mount namespaces at any point in the application's execution \u2013 the mapping will take effect immediately.</p> <pre><code>use Horizon\\Foundation\\Services\\Autoloader;\n\nAutoloader::mount('App\\\\', '/absolute/path/to/src');\n</code></pre>"},{"location":"reference/architecture/facades/","title":"Facades","text":""},{"location":"reference/architecture/facades/#introduction","title":"Introduction","text":"<p>Horizon offers a set of static helper classes which provide shortcuts for common tasks, called facades. We recommend using these facades wherever possible to reduce code complexity.</p>"},{"location":"reference/architecture/facades/#available_facades","title":"Available facades","text":""},{"location":"reference/architecture/facades/#ace","title":"Ace","text":"<p>The <code>Horizon\\Support\\Facades\\Ace</code> facade allows invoking <code>ace</code> commands directly from your code. Rather than spawning a child process, this will directly invoke the framework's console libraries and emulate a console environment.</p>"},{"location":"reference/architecture/facades/#application","title":"Application","text":"<p>The <code>Horizon\\Foundation\\Application</code> facade provides a large number of helper functions and utilities, including for service container resolution, path resolution, and configuration retrieval.</p>"},{"location":"reference/architecture/facades/#component","title":"Component","text":"<p>The <code>Horizon\\Support\\Facades\\Component</code> facade provides methods to register or render HTML view components.</p>"},{"location":"reference/architecture/facades/#framework","title":"Framework","text":"<p>The <code>Horizon\\Foundation\\Framework</code> facade provides some functions for internal purposes (such as for resolving paths within the internal <code>horizon</code> directory). Notably, it offers a function to retrieve the framework version.</p>"},{"location":"reference/architecture/facades/#http","title":"Http","text":"<p>The <code>Horizon\\Support\\Facades\\Http</code> facade provides methods to retrieve common objects from the HTTP kernel, such as the request and response objects. It also provides a shortcut to reference the HTTP kernel directly.</p>"},{"location":"reference/architecture/file-structure/","title":"File structure","text":""},{"location":"reference/architecture/file-structure/#application","title":"Application","text":"<p>The <code>app</code> directory stores all application files, such as libraries, packages, source code, views, and extensions. It is the primary workstation of any Horizon application.</p> Directory Description <code>/config</code> Project configuration files <code>/errors</code> Custom HTTP error pages <code>/extensions</code> Themes, plugins, etc <code>/public</code> Public assets like images and styles <code>/translations</code> Translation files <code>/routes</code> Route declaration files <code>/src</code> Project source code and libraries <code>/views</code> Hardcoded view templates <code>/vendor</code> Optional extra composer packages <p>Most of these paths can be customized in the <code>app:paths</code> configuration option.</p>"},{"location":"reference/architecture/file-structure/#horizon","title":"Horizon","text":"<p>The <code>horizon</code> directory is where internal framework libraries are stored. It also hosts a composer vendor directory, a testing suite, default error pages, and other vital resources.</p> <p>Danger</p> <p>Don't edit or directly depend on files in the <code>horizon</code> directory, as these files are strictly internal and are subject to change in future releases.</p>"},{"location":"reference/architecture/helpers/","title":"Helpers","text":""},{"location":"reference/architecture/helpers/#introduction","title":"Introduction","text":"<p>Horizon is based on Laravel 5 and subsequently offers most of the same global helper functions, with identical behaviors and parameters. However, we've written our helpers from scratch to support old versions of PHP and to work without extensions.</p>"},{"location":"reference/architecture/helpers/#documentation","title":"Documentation","text":"<p>Refer to the documentation from Laravel 5 for a list of available helpers:</p> <p>https://laravel.com/docs/5.7/helpers</p>"},{"location":"reference/architecture/service-container/","title":"Service container","text":""},{"location":"reference/architecture/service-container/#introduction","title":"Introduction","text":"<p>The service container is a registry that can be used to retrieve an instance of a class which implements a desired feature, without hardcoding the class name.</p> <p>To accomplish this, the container uses \"service providers,\" each of which give the container a list of classes and identify the features that those classes implement.</p> <p>You can retrieve the application's global service container using the <code>app()</code> global helper function. You can also create your own containers for smaller use cases.</p>"},{"location":"reference/architecture/service-container/#registering_providers","title":"Registering providers","text":"<p>The framework automatically registers providers that are listed in the <code>config/providers.php</code> file. Extensions can also configure a list of their own providers to register.</p> <p>To register a provider manually, the <code>register()</code> method is used.</p> <pre><code>app()-&gt;register(new CustomServiceProvider());\n</code></pre> <p>Warning</p> <p>Providers have a <code>boot()</code> method which can be used to run bootstrapping logic when the framework starts up. This is normally invoked by the framework when they are registered via configuration files. However, when registering a provider manually like above, the <code>boot()</code> method will not be called automatically.</p>"},{"location":"reference/architecture/service-container/#resolving_instances","title":"Resolving instances","text":""},{"location":"reference/architecture/service-container/#resolving_singletons","title":"Resolving singletons","text":"<p>The service container allows you to resolve a single class instance from a particular type, called a singleton. This is the most common method of resolution. If multiple providers are offering instances for the requested type, only the last-registered instance will be resolved.</p> <p>You can use the <code>make()</code> method on a container to make a single instance of a target type.</p> <pre><code>$instance = app()-&gt;make('App\\Dependency');\n</code></pre> <p>If you're only using the global service container, then the <code>resolve()</code> helper function is available as a convenient shortcut.</p> <pre><code>$instance = resolve('App\\Dependency');\n</code></pre>"},{"location":"reference/architecture/service-container/#resolving_collections","title":"Resolving collections","text":"<p>In some cases, you'll want to retrieve all instances of a target type, from all of the providers that have registered it across the application.</p> <p>The application uses this strategy to load a number of core components, including extensions, views, and translations. It's a great way to load dynamic objects that might come from the user.</p> <p>You can use the <code>all()</code> method on a container to retrieve a <code>ServiceObjectCollection</code>, which holds a list of all resolved objects.</p> <pre><code>$collection = app()-&gt;all('App\\Dependency');\n\n$instances = $collection-&gt;all(); // Get an array of instances\n$first = $collection-&gt;first(); // Get the first instance\n\nwhile ($instance = $collection-&gt;next()) // Iterate using next()\nforeach ($collection as $instance) // Iterate using foreach()\n</code></pre>"},{"location":"reference/architecture/service-providers/","title":"Service providers","text":""},{"location":"reference/architecture/service-providers/#introduction","title":"Introduction","text":"<p>Horizon implements a basic service provider which is used by the service container to instantiate objects for services that need them. Internally, they are used for views, routes, components, translations, and so on. It is also possible to utilize providers for your own applications as well, so having an understanding of this concept is fairly important.</p> <p>You can see all of the registered providers in the <code>config/providers.php</code> file. By default, the core essentials are in this file, but you can remove them and write your own to change how the framework functions.</p>"},{"location":"reference/architecture/service-providers/#writing_service_providers","title":"Writing service providers","text":"<p>You can create a class anywhere in your source code and extend the core service provider class to get started. The following code sample shows the basic methods you'll be implementing.</p> src/Providers/CustomProvider.php<pre><code>namespace App\\Providers;\n\nclass CustomProvider extends Horizon\\Support\\Services\\ServiceProvider {\n\n    /**\n     * Boots the service provider.\n     */\n    public function boot() {}\n\n    /**\n     * Gets a list of all class names that the service provider can provide.\n     *\n     * @return string[]\n     */\n    public function provides() {}\n\n    /**\n     * Registers the bindings in the service provider.\n     */\n    public function register() {}\n\n}\n</code></pre>"},{"location":"reference/architecture/service-providers/#booting_the_provider","title":"Booting the provider","text":"<p>The <code>boot()</code> method is called by the framework's kernel as soon as the service provider is loaded. By default, this happens immediately after autoloader namespaces are fully loaded, so quite early in the app lifecycle.</p> <p>Warning</p> <p>Avoid placing bootstrap logic in the constructor.</p>"},{"location":"reference/architecture/service-providers/#describing_types","title":"Describing types","text":"<p>The <code>provides()</code> method is expected to return an array of types that the provider can make. This will generally be an array of fully qualified class names.</p> <pre><code>public function provides() {\n    return array(\n        'App\\Vehicles\\Car',\n        'App\\Vehicles\\Bike'\n    );\n}\n</code></pre>"},{"location":"reference/architecture/service-providers/#resolving_instances","title":"Resolving instances","text":"<p>The <code>register()</code> method allows binding a provided class name to a callable which will return an instance of that class. To do this we use the protected function <code>bind()</code>. If for some reason you are unable to provide an instance from within the callable, you can return <code>null</code>.</p> <pre><code>public function register() {\n    // We can return a single instance\n    $this-&gt;bind('App\\Vehicles\\Car', function() {\n        return new Car('2018 Honda Civic', 'Blue');\n    });\n\n    // We can also return an array of instances\n    $this-&gt;bind('App\\Vehicles\\Bike', function() {\n        return array(\n            new Bike('Kawasaki Ninja 300', 'Green'),\n            new Bike('Kawasaki Ninja 300', 'Red')\n        );\n    });\n}\n</code></pre> <p>Note that the declaration of types (via the <code>provides()</code> method) is done separately from this method in order to support deferred providers, which will be touched on further below.</p>"},{"location":"reference/architecture/service-providers/#registering_providers","title":"Registering providers","text":"<p>Most providers are registered in the <code>config/providers.php</code> file. To register a new provider, you only need to add its class name to the array.</p> config/providers.php<pre><code>return array(\n    'Horizon\\Routing\\RoutingServiceProvider',\n    'Horizon\\View\\ViewServiceProvider',\n    'Horizon\\Extension\\ExtensionServiceProvider',\n    'Horizon\\Translation\\TranslationServiceProvider',\n    'Horizon\\Updates\\UpdateServiceProvider',\n    'App\\Providers\\CustomProvider'\n);\n</code></pre> <p>Note</p> <p>It's possible to use the <code>::class</code> resolver instead of strings. However, because this is a PHP 5.6 feature, strings are used by default to keep the framework compatible with older versions.</p>"},{"location":"reference/architecture/service-providers/#deferred_providers","title":"Deferred providers","text":"<p>For providers that are loaded from the configuration file, the <code>boot()</code> method will be invoked automatically by the framework. However, it's possible to mark a provider as deferred.</p> <p>When a provider is deferred, the container still calls the <code>provides()</code> method to check what types it can construct. However, the <code>boot()</code> and <code>register()</code> methods won't be called until one of those types is actually requested at runtime.</p> <p>This is generally not necessary for simple or lightweight providers. However, for providers with heavy bootstrapping logic, this can be an invaluable tool to improve performance.</p> <p>To defer a provider, simply set the protected member <code>$defer</code> to <code>true</code>.</p> <pre><code>class CustomProvider extends ServiceProvider {\n\n    protected $defer = true;\n\n}\n</code></pre>"},{"location":"reference/database/migrations/","title":"Migrations","text":"<p>Horizon offers migrations that can be managed both programatically and through the built-in <code>ace</code> command line interface. These migrations allow you to make incremental revisions to your database schemas during development and deployment.</p>"},{"location":"reference/database/migrations/#generating_migrations","title":"Generating migrations","text":"<p>Use the <code>ace make:migration</code> command to create a new migration file. Enter the name of the migration as its argument. The name is up to you and, while it does not need to be unique, should briefly and accurately describe what the migration does.</p> <p>For our example, we will create a new <code>users</code> table by running:</p> <pre><code>php ace make:migration users\n</code></pre> <p>This will create a file with the current timestamp and the migration name, like <code>/app/database/migrations/1635902615_users.php</code>. It will also open the file automatically for supported editors.</p>"},{"location":"reference/database/migrations/#migration_structure","title":"Migration structure","text":"<p>The generated migration will look something like below. Note that the class name must be unchanged.</p> <pre><code>use Horizon\\Database\\Migration;\nuse Horizon\\Database\\Migration\\Schema;\nuse Horizon\\Database\\Migration\\Blueprint;\n\n/**\n * Creates the users table.\n */\nclass Migration_1635902615 extends Migration {\n\n    /**\n     * Run the migration.\n     */\n    public function up() {\n        Schema::create('users', function(Blueprint $table) {\n            $table-&gt;increments('id');\n            $table-&gt;string('email');\n            $table-&gt;string('password');\n            $table-&gt;timestamps();\n        });\n    }\n\n    /**\n     * Revert the migration.\n     */\n    public function down() {\n        Schema::drop('users');\n    }\n\n}\n</code></pre>"},{"location":"reference/database/migrations/#setting_the_connection","title":"Setting the connection","text":"<p>Horizon allows you to specify multiple database connections in the <code>app/config/database.php</code> file. Migrations can choose which connection to use. The default connection for a migration is <code>main</code>.</p> <pre><code>class Migration_1635902615 extends Migration {\n\n    protected $connection = 'main';\n\n}\n</code></pre>"},{"location":"reference/database/migrations/#commands","title":"Commands","text":""},{"location":"reference/database/migrations/#run_migrations","title":"Run migrations","text":"<p>The <code>migration:run</code> command will execute all outstanding migrations.</p> <pre><code>php ace migration:run\n</code></pre>"},{"location":"reference/database/migrations/#roll_back_migrations","title":"Roll back migrations","text":"<p>The <code>migration:rollback</code> command is used to revert the most recent migration batch.</p> <pre><code>php ace migration:rollback\n</code></pre> <p>Roll back to a specific batch number with the <code>--batch</code> option. Batches start at <code>1</code>.</p> <pre><code>php ace migration:rollback --batch=1\n</code></pre> <p>Roll back a specific number of the most recent batches with the <code>--step</code> option. For example, passing <code>2</code> will revert the last two migration runs.</p> <pre><code>php ace migration:rollback --step=2\n</code></pre> <p>Roll back all migrations by passing the <code>--all</code> flag or by passing <code>--batch=0</code>.</p> <pre><code>php ace migration:rollback --all\n</code></pre>"},{"location":"reference/database/migrations/#drop_all_tables_and_migrate","title":"Drop all tables and migrate","text":"<p>The <code>migration:fresh</code> command will drop all tables and run migrations from the beginning, effectively giving you a fresh start. Be careful though! This will drop all tables in all databases, not just those created via migrations.</p> <pre><code>php ace migration:fresh\n</code></pre>"},{"location":"reference/database/migrations/#check_migration_status","title":"Check migration status","text":"<p>The <code>migration:status</code> command checks and displays the current status of migrations.</p> <pre><code>php ace migration:status\n</code></pre>"},{"location":"reference/database/migrations/#tables","title":"Tables","text":""},{"location":"reference/database/migrations/#creating_tables","title":"Creating tables","text":"<p>To create a new database table, use the <code>create()</code> method on the <code>Schema</code> helper. The first argument is the name of the table, and the second argument is a closure that receives and uses a <code>Blueprint</code> instance to build the table.</p> <pre><code>use Horizon\\Database\\Migration\\Schema;\nuse Horizon\\Database\\Migration\\Blueprint;\n\nSchema::create('users', function(Blueprint $table) {\n    $table-&gt;increments('id');\n    $table-&gt;string('email');\n    $table-&gt;string('password');\n    $table-&gt;timestamps();\n});\n</code></pre>"},{"location":"reference/database/migrations/#checking_for_tables_and_columns","title":"Checking for tables and columns","text":"<p>To check if a table or column exists, use the <code>hasTable</code> and <code>hasColumn</code> helper methods.</p> <pre><code>Schema::hasTable('users');\nSchema::hasColumn('users', 'email');\n</code></pre>"},{"location":"reference/database/migrations/#changing_database_connections","title":"Changing database connections","text":"<p>To change which connection is used for a schema operation, use the <code>connection</code> method.</p> <pre><code>Schema::connection('connection_name')-&gt;hasTable('users');\n</code></pre>"},{"location":"reference/database/migrations/#changing_table_options","title":"Changing table options","text":"<p>The <code>engine</code> property on the <code>Blueprint</code> instance can be used to change the storage engine for a specific table.</p> <pre><code>Schema::create('users', function(Blueprint $table) {\n    $table-&gt;engine = 'InnoDB';\n});\n</code></pre> <p>The <code>charset</code> and <code>collation</code> properties can be used to specifiy the character set and collation for the created table.</p> <pre><code>Schema::create('users', function(Blueprint $table) {\n    $table-&gt;charset = 'utf8mb4';\n    $table-&gt;collation = 'utf8mb4_unicode_ci';\n});\n</code></pre>"},{"location":"reference/database/migrations/#updating_tables","title":"Updating tables","text":"<p>The <code>table()</code> method on the <code>Schema</code> helper can also update existing tables. It works just like the <code>create()</code> method for creating new tables.</p> <pre><code>Schema::table('users', function (Blueprint $table) {\n    $table-&gt;integer('votes');\n});\n</code></pre>"},{"location":"reference/database/migrations/#renaming_tables","title":"Renaming tables","text":"<p>The <code>rename()</code> method can be used to rename an existing table.</p> <pre><code>Schema::rename('from', 'to');\n</code></pre>"},{"location":"reference/database/migrations/#dropping_tables","title":"Dropping tables","text":"<p>You can use the <code>drop</code> and <code>dropIfExists</code> methods to drop tables.</p> <pre><code>Schema::drop('users');\nSchema::dropIfExists('users');\n</code></pre>"},{"location":"reference/database/migrations/#migrations_api","title":"Migrations API","text":"<p>Horizon offers a class to programatically interact with and query state for migrations in the application.</p> <pre><code>use Horizon\\Database\\Migrator;\n\n$migrator = new Migrator();\n$migrator-&gt;dryRun = false;\n$migrator-&gt;direction = Migrator::DIRECTION_UP;\n\n$migrations = $migrator-&gt;getMigrations();\n</code></pre> <p>For example, you can check when a migration was executed using the <code>getMigrationTime()</code> method. This will return <code>null</code> if the migration hasn't been executed yet.</p> <pre><code>$migration = $migrations[0];\n\nif ($migrator-&gt;getMigrationTime($migration) == null) {\n    // The migration hasn't run yet\n}\n</code></pre> <p>The full API is currently undocumented, but there are methods to do just about anything, including running migrations.</p> <p>The <code>ace</code> commands listed above use this migrator class directly. Feel free to look at their source code to learn more about its capabilities and usage.</p>"},{"location":"reference/database/query-builder/","title":"Query builder","text":"<p>While you can manually type your queries, it is not recommended. Not only do queries typically look ugly in code, but writing them yourself creates extra work if you wish to stay secure.</p> <p>For this reason, Horizon has a complete query builder, equipped with automatic prepared statements and support for virtually every type of query.</p>"},{"location":"reference/database/query-builder/#global_access","title":"Global access","text":"<p>There are two global classes in the root namespace called <code>Database</code> and <code>DB</code> which point to Horizon's internal query builder interface. Use these to get started.</p>"},{"location":"reference/database/query-builder/#queries","title":"Queries","text":"<p>To start a query builder instance, you must call the method for the type of query you want.</p> <pre><code>Database::alter()\nDatabase::create()\nDatabase::delete()\nDatabase::drop()\nDatabase::insert()\nDatabase::select()\nDatabase::show()\nDatabase::update()\n</code></pre> <p>To run a query without using the query builder, call the <code>query()</code> method.</p> <pre><code>Database::query('SELECT * FROM users');\n</code></pre>"},{"location":"reference/database/query-builder/#alter","title":"Alter","text":"Method Description <code>table($tableName)</code> Sets the table to alter. <code>addColumn($column, $after)</code> Adds a column to the table. <code>modifyColumn($column, $after)</code> Changes the properties of a column. <code>changeColumn($column, $newName, $after)</code> Changes the name and properties of a column. <code>dropColumn($columnName)</code> Removes a column. <code>addPrimaryKey($column,...)</code> Adds a primary key. <code>addIndex($column,...)</code> Adds an index. <code>addUniqueIndex($column,...)</code> Adds a unique index. <code>dropPrimaryKey()</code> Drops the current primary key. <code>dropIndex($name)</code> Drops an index. <code>dropForeignKey($name)</code> Drops a foreign key. <code>rename($newTableName)</code> Changes the table name. <code>engine($engine)</code> Sets the table engine. <code>charset($charset)</code> Sets the character set. <code>collate($collate)</code> Sets the character collation. <code>opt($option, $value)</code> Sets an option manually."},{"location":"reference/database/query-builder/#create","title":"Create","text":"Method Description <code>table($tableName)</code> Sets the table to target. <code>column($column)</code> Adds a column to the table. <code>columns($columns)</code> Sets the columns to create. <code>primary($column, ...)</code> Sets the column(s) to use for the primary key. <code>unique($column, ...)</code> Sets the column(s) to use for a unique index. <code>index($column, ...)</code> Sets the column(s) to use for an index. <code>engine($engine)</code> Sets the table engine. <code>charset($charset)</code> Sets the character set. <code>collate($collate)</code> Sets the character collation. <code>opt($option, $value)</code> Sets an option manually."},{"location":"reference/database/query-builder/#delete","title":"Delete","text":"Method Description <code>from($tableName)</code> Sets the table to delete from. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback, $operator)</code> Encloses statements in parenthesis. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>orWhere($column, $operator, $equals)</code> Creates a match condition. <code>andWhere($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback)</code> Encloses statements in parenthesis. <code>andEnclose($callback)</code> Encloses statements in parenthesis. <code>orEnclose($callback)</code> Encloses statements in parenthesis. <code>limit($limit)</code> Limits the query to the specified number of rows. <code>orderBy($column, $direction, ...)</code> Orders the results."},{"location":"reference/database/query-builder/#drop","title":"Drop","text":"Method Description <code>table($tableName)</code> Sets the table to target. <code>database($databaseName)</code> Sets the database to target. <code>ifExists()</code> Sets the query to only drop if the target exists."},{"location":"reference/database/query-builder/#insert","title":"Insert","text":"Method Description <code>into($tableName)</code> Sets the table to insert into. <code>values($values)</code> Sets values to insert."},{"location":"reference/database/query-builder/#select","title":"Select","text":"Method Description <code>columns($name, ...)</code> Sets the columns to select. <code>count()</code> Sets the column to COUNT(*). <code>from($tableName)</code> Sets the table to select from. <code>distinct()</code> Sets the distinct condition. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback, $operator)</code> Encloses statements in parenthesis. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>orWhere($column, $operator, $equals)</code> Creates a match condition. <code>andWhere($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback)</code> Encloses statements in parenthesis. <code>andEnclose($callback)</code> Encloses statements in parenthesis. <code>orEnclose($callback)</code> Encloses statements in parenthesis. <code>limit($limit)</code> Limits the query to the specified number of rows. <code>orderBy($column, $direction, ...)</code> Orders the results."},{"location":"reference/database/query-builder/#show","title":"Show","text":"Method Description <code>tables()</code> Sets the query to show tables. <code>tableStatus()</code> Sets the query to show tables. <code>columns($table)</code> Sets the query to show tables (optionally against a pattern). <code>databases()</code> Sets the query to show databases. <code>createTable($table)</code> Sets the query to show table creation query."},{"location":"reference/database/query-builder/#update","title":"Update","text":"Method Description <code>table($tableName)</code> Sets the table to target. <code>values($values)</code> Sets values to update. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback, $operator)</code> Encloses statements in parenthesis. <code>where($column, $operator, $equals)</code> Creates a match condition. <code>orWhere($column, $operator, $equals)</code> Creates a match condition. <code>andWhere($column, $operator, $equals)</code> Creates a match condition. <code>enclose($callback)</code> Encloses statements in parenthesis. <code>andEnclose($callback)</code> Encloses statements in parenthesis. <code>orEnclose($callback)</code> Encloses statements in parenthesis. <code>limit($limit)</code> Limits the query to the specified number of rows. <code>orderBy($column, $direction, ...)</code> Orders the results."},{"location":"reference/database/query-builder/#getting_results","title":"Getting results","text":"<p>Once you've built your queries using the methods above, you have a few options.</p>"},{"location":"reference/database/query-builder/#execution","title":"Execution","text":"<p>For modification queries (<code>INSERT</code>, <code>UPDATE</code>, <code>ALTER</code>, etc), you should use <code>exec</code>. This will return the number of affected rows if applicable, or a boolean for success.</p> <pre><code>$query-&gt;exec();\n</code></pre>"},{"location":"reference/database/query-builder/#fetch_rows","title":"Fetch rows","text":"<p>To execute the query and get all returned rows as objects (or models if using via ORM), call the <code>get</code> method.</p> <pre><code>$rows = $query-&gt;get();\n</code></pre>"},{"location":"reference/database/query-builder/#compile","title":"Compile","text":"<p>Compiles the query into a string which you may use for your own purposes.</p> <pre><code>$query-&gt;compile();\n</code></pre>"},{"location":"reference/database/query-builder/#prepared_parameters","title":"Prepared parameters","text":"<p>Mainly for internal use, if the compiled query has any <code>?</code> bindings, this array contains their real values.</p> <pre><code>$query-&gt;getParameters();\n</code></pre>"},{"location":"reference/database/query-builder/#features","title":"Features","text":""},{"location":"reference/database/query-builder/#enclosures","title":"Enclosures","text":"<p>Encloses are parenthesis around conditions to form more advanced statements. And yes, you can put enclosures inside other enclosures.</p> <pre><code>// SELECT * FROM `table` WHERE ( `id` = ? OR `balance` &gt;= ? )\n// OR ( `id` = ? OR `balance` &gt; ? );\n\n$query-&gt;enclose(function($builder) {\n    $builder-&gt;where('id', '=', 10);\n    $builder-&gt;orWhere('balance', '&gt;=', 1000);\n});\n\n$query-&gt;orEnclose(function($builder) {\n    $builder-&gt;where('id', '=', 9);\n    $builder-&gt;orWhere('balance', '&gt;', 10000);\n});\n</code></pre>"},{"location":"reference/database/query-builder/#functions","title":"Functions","text":"<p>To supply functions in where conditions, such as <code>NOW()</code>, use a string. For functions with parameters, use an array.</p> <pre><code>// WHERE `time` = NOW()\n$query-&gt;where('time', '=', 'NOW()');\n\n// WHERE `time` = NOW(10, 20)\n$query-&gt;where('time', '=', array('NOW()', 10, 20));\n</code></pre>"},{"location":"reference/database/query-builder/#raw_references","title":"Raw references","text":"<p>The <code>Horizon\\Database\\QueryBuilder\\RawReference</code> helper class can be used to insert a raw segment into a query. This is a fallback for more complicated cases where the query builder might not handle it properly.</p> <pre><code>$query-&gt;where('time', '=', new RawReference('NOW()'));\n</code></pre> <p>The global <code>db_verbatim()</code> helper function builds upon this concept, allowing you to pass multiple values which will be inserted directly into the query, delimited by spaces.</p> <pre><code>Database::update()-&gt;values(array(\n    'views' =&gt; db_verbatim(db_ref('views'), '+1')\n));\n</code></pre>"},{"location":"reference/database/query-builder/#column_references","title":"Column references","text":"<p>The global <code>db_ref()</code> helper function can be used to insert a column name into a query. This is useful when referencing a column in your query.</p> <pre><code>$query-&gt;where('balance', '&gt;=', db_ref('minimum_balance'));\n</code></pre>"},{"location":"reference/database/query-builder/#examples","title":"Examples","text":""},{"location":"reference/database/query-builder/#selecting_rows","title":"Selecting rows","text":"<pre><code>Database::select()\n    -&gt;columns('username', 'email')\n    -&gt;from('users')\n    -&gt;where('id', '=', 5)\n    -&gt;andWhere('deleted', '=', false);\n</code></pre>"},{"location":"reference/database/query-builder/#joins","title":"Joins","text":"<pre><code>Database::select()\n    -&gt;columns('table1.a', 'table2.b')\n    -&gt;from('table1', 'table2')\n</code></pre>"},{"location":"reference/database/query-builder/#inserting_rows","title":"Inserting rows","text":"<pre><code>Database::insert()\n    -&gt;into('table')\n    -&gt;values(array(\n        'id' =&gt; 1,\n        'username' =&gt; 'john.doe'\n    ));\n</code></pre> <p>You can also supply an array of arrays into <code>values</code> for multiple inserts at once.</p> <pre><code>-&gt;values(array(\n    array('id' =&gt; 1, 'username' =&gt; 'john.doe'),\n    array('id' =&gt; 2, 'username' =&gt; 'jane.doe')\n));\n</code></pre>"},{"location":"reference/database/query-builder/#updating_rows","title":"Updating rows","text":"<pre><code>Database::update()\n    -&gt;table('table')\n    -&gt;values(array(\n        'email' =&gt; 'john@doe.org',\n        'username' =&gt; 'john.doe'\n    ))\n    -&gt;where('id', '=', 1);\n</code></pre>"},{"location":"reference/database/query-builder/#deleting_rows","title":"Deleting rows","text":"<pre><code>Database::delete()\n    -&gt;from('table')\n    -&gt;where('id', '=', 1)\n    -&gt;limit(1);\n</code></pre>"},{"location":"reference/essentials/controllers/","title":"Controllers","text":""},{"location":"reference/essentials/controllers/#introduction","title":"Introduction","text":"<p>When a route is matched to the current request, a controller will be called to fulfill the request. This is the fundamental purpose of controllers \u2013 to perform any backend logic and send back the output. A basic controller will look something like this:</p> app/src/Http/Controllers/Home.php<pre><code>namespace App\\Http\\Controllers;\n\nuse Horizon\\Http\\Controller;\nuse Horizon\\Http\\Request;\nuse Horizon\\Http\\Response;\n\nclass Home extends Controller {\n\n    public function __invoke(Request $request, Response $response) {\n        view('home');\n    }\n\n}\n</code></pre>"},{"location":"reference/essentials/controllers/#registering_controllers","title":"Registering controllers","text":"<p>The only way to register a controller for automatic execution is to assign it to a route from your routing configuration file. To learn more about how that works, see the routing documentation.</p> app/routes/web.php<pre><code>Route::get('/', 'App\\Http\\Controllers\\Home');\n</code></pre>"},{"location":"reference/essentials/controllers/#parameter_binding","title":"Parameter binding","text":"<p>Like middleware, controller methods do not have any specific parameter requirements. Instead, the framework will use reflection and the service container to bind and provide objects and values for your parameters in your own order. By default, all of the following is available as parameters for middleware.</p> <ul> <li>The <code>Request</code> and <code>Response</code> instances</li> <li>The <code>Route</code> instance</li> <li>All request attributes</li> <li>All route variables</li> </ul> <p>This means given the following route:</p> <pre><code>Route::get('/user/{name}/{tab?}');\n</code></pre> <p>Any of these method signatures will work, for example:</p> <pre><code>public function __invoke();\npublic function __invoke(Request $request);\npublic function __invoke(Request $request, Response $response);\npublic function __invoke(Route $route);\npublic function __invoke(Response $response, $name, $tab = 'profile');\n</code></pre> <p>Tip</p> <p>You can retrieve the request and response instances using the global <code>request()</code> and <code>response()</code> helpers, so those parameters are purely aesthetic.</p>"},{"location":"reference/essentials/controllers/#initialization","title":"Initialization","text":"<p>If you need to execute code for an entire controller, regardless of which method is invoked, you can use the <code>init</code> method. This is called immediately before the controller method and can also bind parameters as specified above.</p> <pre><code>public function init($userId) {\n    $this-&gt;user = User::findOrFail($userId);\n}\n</code></pre>"},{"location":"reference/essentials/controllers/#middleware","title":"Middleware","text":"<p>Controllers can also instruct the framework to execute middleware before its execution, using an overridable method named <code>getMiddleware</code>. This method can return an array of class names or a single class name as a string.</p> <pre><code>public function getMiddleware() {\n    return array(\n        'App\\Http\\Middleware\\RunMeFirst'\n    );\n}\n</code></pre> <p>Note</p> <p>Middleware defined in the routes config will still execute, and any duplicates will only run once.</p>"},{"location":"reference/essentials/errors/","title":"Errors","text":""},{"location":"reference/essentials/errors/#error_handling","title":"Error handling","text":"<p>Horizon has an error handling system which by default fully replicates the behavior of PHP's error handling. You likely won't be able to tell the difference, but any errors or error logs you see from Horizon are rendered, logged, and handled by Horizon.</p> <p>It is possible \u2013 and pretty easy \u2013 to customize this behavior.</p>"},{"location":"reference/essentials/errors/#configuring_errors","title":"Configuring errors","text":"<p>The <code>errors.php</code> configuration file has various options relating to error handling.</p> <pre><code>// Sets the class to use for error reporting and displaying.\n'handler' =&gt; 'Horizon\\Exception\\ErrorHandler',\n\n// Determines whether errors in the framework or app will be displayed in detail in the response.\n'display_errors' =&gt; true,\n\n// Determines the error severity level at which errors should be displayed.\n'display_sensitivity' =&gt; 4,\n\n// Determines whether errors in the framework or app will be logged to the filesystem.\n'log_errors' =&gt; true,\n\n// Determines the error severity level at which errors should be logged.\n'log_sensitivity' =&gt; 3,\n\n// Determines whether the '@' operator can silence logging of errors.\n'silent_logging' =&gt; true,\n\n// Determines whethe the '@' operator can silence rendering of errors.\n'silent_display' =&gt; true\n</code></pre>"},{"location":"reference/essentials/errors/#custom_error_handler","title":"Custom error handler","text":"<p>To customize the handling of errors, create a class at <code>App\\Exception\\Handler</code> which extends <code>Horizon\\Exception\\Handler</code>. You can override the default <code>report()</code> and <code>render()</code> methods to customize behavior.</p> <pre><code>namespace App\\Exception;\n\nuse Horizon\\Framework\\Application;\nuse Horizon\\Exception\\HorizonError;\nuse Horizon\\Http\\Exception\\HttpResponseException;\n\nclass Handler extends \\Horizon\\Exception\\Handler {\n\n    public function http(HttpResponseException $ex) {\n        // Handles an HTTP error. Default behavior is to have the HTTP kernel\n        // show a matching error page:\n\n        Application::kernel()-&gt;http()-&gt;error($ex-&gt;getCode());\n    }\n\n    public function render(HorizonError $error) {\n        // Render the error\n        echo sprintf(\n            \"%s: %s in %s on line %d\\n\",\n            $error-&gt;getLabel(),\n            $error-&gt;getMessage(),\n            $error-&gt;getFile(),\n            $error-&gt;getLine()\n        );\n    }\n\n    public function log(HorizonError $error) {\n        // Log the error\n    }\n\n    public function report(HorizonError $error) {\n        // Report the error\n        // Make sure to call parent::report() if you override this method.\n\n        parent::report($error);\n    }\n\n}\n</code></pre>"},{"location":"reference/essentials/errors/#exceptions","title":"Exceptions","text":""},{"location":"reference/essentials/errors/#framework_exceptions","title":"Framework exceptions","text":"<p><code>Horizon\\Exception\\HorizonException</code> is a low-level exception which means an error occurred at the kernel level. The code for such an exception will be one of the following.</p> Code Meaning <code>0x1</code> Missing required trait <code>0x2</code> Missing configuration file <code>0x3</code> Configuration file did not return an array <code>0x4</code> Driver load failed <code>0x5</code> Critical file missing <code>0x6</code> Critical class missing <code>0x7</code> Request instance not loaded <code>0x8</code> Response instance not loaded <code>0x9</code> View initialization error"},{"location":"reference/essentials/errors/#http_response_exceptions","title":"Http response exceptions","text":"<p>The <code>Horizon\\Http\\Exception\\HttpResponseException</code> defines an HTTP status code (4xx or 5xxx) which, if uncaught, is shown to the user as an error page. You can override these error pages by creating an HTML file at <code>/app/errors/</code> with the error code as the file name (e.g. <code>404.html</code>).</p>"},{"location":"reference/essentials/errors/#reporting_exceptions","title":"Reporting exceptions","text":"<p>Any uncaught exception is sent to the error handler. If the exception has a method called <code>report()</code>, then this method will be invoked. You can use this to implement special reporting logic on a per-exception basis.</p> <pre><code>use Exception;\nuse Horizon\\Exception\\HorizonError;\n\nclass ReportingException extends Exception {\n\n    public function report(HorizonError $error) {\n        $syslog-&gt;reportException($this);\n    }\n\n}\n</code></pre>"},{"location":"reference/essentials/extensions/","title":"Extensions","text":""},{"location":"reference/essentials/extensions/#introduction","title":"Introduction","text":"<p>Horizon implements a barebone extensions system which can be extended and built upon to create systems like themes and plugins for your application. The default implementation allows extensions to map their own namespace and source files, require a vendor autoloader, and register their own service providers.</p> <p>This means that in the default implementation and without any additional work needed, extensions can already add views, translations, routes, and updates.</p>"},{"location":"reference/essentials/extensions/#creating_extensions","title":"Creating extensions","text":"<p>The default directory for extensions is <code>/app/extensions/</code>. In this directory, you should create a new subdirectory with a simplified name of the extension. For this guide we'll create an extension with the boring name of <code>custom</code>, so we should create a directory at <code>/app/extensions/custom/</code>.</p>"},{"location":"reference/essentials/extensions/#configuration_file","title":"Configuration file","text":"<p>Once we have our empty extension directory, create a new PHP file with the same name as the folder. In this case, we'll name it <code>custom.php</code>. The file should return an array with at least a <code>name</code> and <code>version</code>. Here are all possible properties:</p> app/extensions/custom/custom.php<pre><code>&lt;?php\n\nreturn array(\n    // Basic properties\n    'name' =&gt; 'Test',\n    'description' =&gt; 'This is a test extension that does something cool.',\n    'version' =&gt; '1.0.0',\n\n    // Optional main class\n    'main' =&gt; 'Custom\\TestExtension',\n\n    // Optional namespace mapping (for autoloading)\n    'namespaces' =&gt; array(\n        'Custom\\\\' =&gt; 'src/'\n    ),\n\n    // Optional files to require\n    'files' =&gt; array(\n        'vendor/autoload.php'\n    ),\n\n    // Optional service providers to register\n    'providers' =&gt; array(\n        'Custom\\\\CustomServiceProvider'\n    )\n);\n</code></pre>"},{"location":"reference/essentials/extensions/#retrieving_extensions","title":"Retrieving extensions","text":"<p>You can retrieve an array of all extensions registered in the application using the extension kernel. The extensions are all <code>Horizon\\Extension\\Extension</code> instances.</p> <pre><code>$extensions = Application::kernel()-&gt;extension()-&gt;get();\n</code></pre>"},{"location":"reference/essentials/extensions/#retrieving_errors","title":"Retrieving errors","text":"<p>If an extension fails to load due to an exception, there will be no visible output regarding the error. It will fail silently. However, in some cases it is ideal to be able to see these exceptions and display them to the user. You can retrieve an array of <code>Horizon\\Extension\\Exception</code> instances from the extension kernel.</p> <pre><code>$exceptions = Application::kernel()-&gt;extension()-&gt;getExceptions();\n\nforeach ($exceptions as $exception) {\n    $name = $exception-&gt;getName();\n    $message = $exception-&gt;getMessage();\n\n    echo \"Extension {$name} failed due to an error: {$message}\";\n}\n</code></pre>"},{"location":"reference/essentials/extensions/#techniques","title":"Techniques","text":""},{"location":"reference/essentials/extensions/#implementing_themes","title":"Implementing themes","text":"<p>While a theme system is not built into the framework, it is possible to utilize extensions to build one quite easily. The steps will look something like this:</p> <ul> <li>Set up a <code>ThemeExtension</code> class which extends <code>Extension</code>.</li> <li>Override and implement <code>isEnabled()</code>.</li> <li>Add a default view and translation service provider.</li> <li>Set up a service provider which loads from <code>/app/themes/</code>.</li> <li>The provider should say it provides <code>Extension</code> instances.</li> <li>It should actually provide <code>ThemeExtension</code> instances.</li> <li>Add a boot script with a priority of <code>1</code> or <code>2</code>.</li> <li>From this script, find extensions that are instances of <code>ThemeExtension</code>.</li> <li>Register those extensions in your own theme manager.</li> </ul>"},{"location":"reference/essentials/middleware/","title":"Middleware","text":""},{"location":"reference/essentials/middleware/#introduction","title":"Introduction","text":"<p>Middleware are classes that execute before controllers, but only if a route has been matched. This makes them very useful for things like session authentication, permissions checking, rate limiting, and so on. Here's what a basic middleware looks like:</p> <pre><code>namespace App\\Http\\Middleware;\n\nuse Horizon\\Http\\Request;\nuse Horizon\\Http\\Response;\nuse Horizon\\Http\\Middleware;\n\nclass ExampleMiddleware extends Middleware {\n\n    public function __invoke(Request $request, Response $response) {\n\n    }\n\n}\n</code></pre>"},{"location":"reference/essentials/middleware/#registering_middleware","title":"Registering middleware","text":""},{"location":"reference/essentials/middleware/#routes","title":"Routes","text":"<p>You can define middleware from routing files like <code>/app/routes/web.php</code> using the middleware helper method.</p> <p>Just like with controllers, a middleware can be in the format of <code>App\\ClassName::methodName</code>, but the method name is optional and if it is omitted then <code>__invoke</code> will be assumed.</p> app/routes/web.php<pre><code>Route::middleware('App\\Http\\Middleware\\ExampleMiddleware');\nRoute::middleware('App\\Http\\Middleware\\ExampleMiddleware::myMethod');\n</code></pre>"},{"location":"reference/essentials/middleware/#controllers","title":"Controllers","text":"<p>You can also return middleware as an array from the <code>getMiddleware</code> method of a controller. These middleware always execute after those defined in the routing files.</p> app/src/Http/Controllers/ExampleController.php<pre><code>class ExampleController extends Controller {\n\n    public function getMiddleware() {\n        return array(\n            'App\\Http\\Middleware\\ExampleMiddleware',\n            'App\\Http\\Middleware\\ExampleMiddleware::myMethod'\n        );\n    }\n\n}\n</code></pre>"},{"location":"reference/essentials/middleware/#parameter_binding","title":"Parameter binding","text":"<p>Like controllers, middleware methods do not have any specific parameter requirements. Instead, the framework will use reflection and the service container to bind and provide objects and values for your parameters in your own order. By default, all of the following is available as parameters for middleware.</p> <ul> <li>The <code>Request</code> and <code>Response</code> instances</li> <li>The <code>Route</code> instance</li> </ul> <p>This means given the following route:</p> <pre><code>Route::get('/user/{name}/{tab?}');\n</code></pre> <p>Any of these method signatures will work, for example:</p> <pre><code>public function __invoke();\npublic function __invoke(Request $request);\npublic function __invoke(Request $request, Response $response);\npublic function __invoke(Route $route);\n</code></pre> <p>Tip</p> <p>You can retrieve the request and response instances using the global <code>request()</code> and <code>response()</code> helpers, so those parameters are purely aesthetic.</p>"},{"location":"reference/essentials/middleware/#techniques","title":"Techniques","text":"<p>Below are some common tricks and techniques used from middleware.</p>"},{"location":"reference/essentials/middleware/#request_attributes","title":"Request attributes","text":"<p>You can set attributes on the <code>Request</code> instance from a middleware to pass it to the controller. This is particularly useful because, for a controller, request attributes are able to be provided as parameters.</p> Middleware<pre><code>public function __invoke(Request $request) {\n    // Session logic here\n    $request-&gt;setAttribute('logged_in', !is_null($user));\n    $request-&gt;setAttribute('user', $user);\n}\n</code></pre> Controller<pre><code>public function get(Request $request, Response $response, User $user, $logged_in) {\n    $request-&gt;getAttribute('logged_in') == $logged_in; // true\n    $request-&gt;getAttribute('user') == $user; // true\n}\n</code></pre>"},{"location":"reference/essentials/middleware/#redirection","title":"Redirection","text":"<p>A middleware can redirect the page using the <code>redirect()</code> helper function. This will prevent the controller from executing.</p> <pre><code>public function __invoke(Request $request) {\n    $uri = urlencode($request-&gt;getRequestUri());\n    redirect('/account/login?redirect=' . $uri);\n}\n</code></pre> <p>To allow the controller to continue executing despite the redirection, pass <code>false</code> into the third parameter of <code>redirect</code>. This parameter determines whether to halt the page.</p> <pre><code>redirect('/account/login?redirect=' . $uri, 302, false);\n</code></pre> <p>Danger</p> <p>Redirecting only sets the status code and <code>location</code> header on the response. It doesn't stop the controller, and won't prevent anything you've printed from being sent to the browser. Make sure to properly stop the controller when redirecting. A common pattern is to <code>return</code> the redirect directly like so:</p> <pre><code>    public function __invoke(Request $request) {\n        if ($condition) {\n            return redirect('/account/login?redirect=' . $uri);\n        }\n\n        // Do more work here\n    }\n</code></pre>"},{"location":"reference/essentials/middleware/#halting","title":"Halting","text":"<p>A middleware can prevent the page from executing any further by \"halting\" it. This is done by calling the <code>halt</code> method on the response instance.</p> <pre><code>response()-&gt;halt();\n</code></pre>"},{"location":"reference/essentials/requests/","title":"Requests","text":""},{"location":"reference/essentials/requests/#getting_the_request_instance","title":"Getting the request instance","text":"<p>There are two primary ways to obtain a request instance. Here's a brief overview.</p>"},{"location":"reference/essentials/requests/#parameter_binding","title":"Parameter binding","text":"<p>Declare a parameter with the <code>Request</code> type in your controller or middleware invoke methods. The framework will detect it and supply the instance.</p> <pre><code>function __invoke(Request $request) {}\n</code></pre>"},{"location":"reference/essentials/requests/#helper_function","title":"Helper function","text":"<p>There is a global <code>request()</code> helper function which returns the current instance.</p> <pre><code>$request = request();\n</code></pre>"},{"location":"reference/essentials/requests/#request_information","title":"Request information","text":""},{"location":"reference/essentials/requests/#get_the_request_path","title":"Get the request path","text":"<p>Gets the path for the request. This always starts with a preceding forward slash (/). For example: \"/path/to/file\"</p> <pre><code>$request-&gt;path();\n</code></pre>"},{"location":"reference/essentials/requests/#get_the_request_url","title":"Get the request URL","text":"<p>Gets the absolute URL for the request, without query parameters. The optional <code>$path</code> parameter will generate a URL for another path.</p> <pre><code>$request-&gt;url();\n// https://www.domain.com/path/to/file\n\n$request-&gt;url('/some/page');\n// https://www.domain.com/some/page\n</code></pre>"},{"location":"reference/essentials/requests/#get_the_full_url","title":"Get the full URL","text":"<p>Gets the absolute URL for the request, including encoded query parameters.</p> <pre><code>$request-&gt;fullUrl();\n// https://www.domain.com/path/to/file?some=query\n</code></pre>"},{"location":"reference/essentials/requests/#get_the_root_url","title":"Get the root URL","text":"<p>Gets the absolute URL to the root of the current domain.</p> <pre><code>$request-&gt;root();\n// https://www.domain.com/\n</code></pre>"},{"location":"reference/essentials/requests/#check_if_the_request_is_from_ajax","title":"Check if the request is from AJAX","text":"<p>Checks whether this request was initiated from AJAX.</p> <pre><code>if ($request-&gt;ajax()) {\n    ...\n}\n</code></pre>"},{"location":"reference/essentials/requests/#check_if_the_request_is_secure","title":"Check if the request is secure","text":"<p>Checks whether this request is transmitted over HTTPS.</p> <pre><code>if ($request-&gt;secure()) {\n    ...\n}\n</code></pre>"},{"location":"reference/essentials/requests/#get_the_remote_address","title":"Get the remote address","text":"<p>Returns the client's IP address. Beware, this can be in either IPv4 or IPv6 format.</p> <pre><code>$request-&gt;ip();\n</code></pre>"},{"location":"reference/essentials/requests/#get_the_user_agent","title":"Get the user agent","text":"<p>Returns the client's user agent string.</p> <pre><code>$request-&gt;userAgent();\n</code></pre>"},{"location":"reference/essentials/requests/#get_headers","title":"Get headers","text":"<p>Returns the value of the specified header as a string, or null.</p> <pre><code>$request-&gt;header('User-Agent');\n</code></pre>"},{"location":"reference/essentials/requests/#user_input","title":"User input","text":""},{"location":"reference/essentials/requests/#get_a_query_value","title":"Get a query value","text":"<p>Retrieve a query value from the request URI using the <code>query</code> method. The second parameter specifies the return value if the query was not found, which is <code>null</code> by default.</p> <pre><code>$id = $request-&gt;query('id');\n$tab = $request-&gt;query('tab', 'default');\n</code></pre>"},{"location":"reference/essentials/requests/#get_a_posted_value","title":"Get a posted value","text":"<p>Retrieve a posted value from a form using the <code>post</code> method. The second parameter specifies the return value if the value was not found, which is <code>null</code> by default.</p> <pre><code>$email = $request-&gt;post('email');\n</code></pre>"},{"location":"reference/essentials/requests/#get_an_input_value","title":"Get an input value","text":"<p>The <code>input</code> method checks for values from both <code>post</code> and <code>query</code>, in that order. The first match is returned, or the second parameter (<code>null</code>) if no matches were found.</p> <pre><code>$email = $request-&gt;input('email');\n</code></pre>"},{"location":"reference/essentials/requests/#get_a_json_value","title":"Get a JSON value","text":"<p>For JSON requests, you can easily parse the incoming data using the <code>json($key, $default)</code> method.</p> <pre><code>// Parse the full body\n$json = $request-&gt;json();\n\n// Get a specific key\n$json = $request-&gt;json('path.to.key');\n\n// Get any errors in the JSON as a string\n$error = $request-&gt;jsonError();\n</code></pre>"},{"location":"reference/essentials/requests/#files","title":"Files","text":""},{"location":"reference/essentials/requests/#get_an_uploaded_file","title":"Get an uploaded file","text":"<p>To obtain a specific file, use the <code>file($key)</code> method. If there is a file with that name, an UploadedFile instance is returned. Otherwise, <code>null</code> is returned.</p> <pre><code>$file = $request-&gt;file('avatar');\n\nif (!is_null($file)) {\n    if ($file-&gt;isValid()) {\n        $file-&gt;getRealPath();\n        $file-&gt;move('/var/uploads/', 'newfilename.png');\n    }\n    else {\n        $response-&gt;write('Upload error!', $file-&gt;getError());\n    }\n}\n</code></pre>"},{"location":"reference/essentials/requests/#attributes","title":"Attributes","text":"<p>Attributes store request data in memory. This is useful for sending data from middleware to controllers, for example.</p> <pre><code>$request-&gt;setAttribute('user', ['username' =&gt; 'john']);\n$request-&gt;getAttribute('user');\n</code></pre>"},{"location":"reference/essentials/requests/#sessions","title":"Sessions","text":"<p>You can access a session instance using the <code>session()</code> method or global helper function. For documentation on how to use sessions, see the sessions page.</p> <pre><code>$session = $request-&gt;session();\n$session = session();\n</code></pre>"},{"location":"reference/essentials/requests/#advanced","title":"Advanced","text":"<p>It's worth noting that the <code>Horizon\\Http\\Request</code> class extends <code>Symfony\\Component\\HttpFoundation\\Request</code>. For further documentation and advanced usage, consult the Symfony Request documentation.</p>"},{"location":"reference/essentials/responses/","title":"Responses","text":""},{"location":"reference/essentials/responses/#getting_the_response_instance","title":"Getting the response instance","text":"<p>There are two primary ways to obtain a request instance. Here's a brief overview.</p>"},{"location":"reference/essentials/responses/#parameter_binding","title":"Parameter binding","text":"<p>Declare a parameter with the <code>Response</code> type in your controller or middleware invoke methods. The framework will detect it and supply the instance.</p> <pre><code>function __invoke(Response $response) {}\n</code></pre>"},{"location":"reference/essentials/responses/#helper_function","title":"Helper function","text":"<p>There is a global <code>response()</code> helper function which returns the current instance.</p> <pre><code>$response = response();\n</code></pre>"},{"location":"reference/essentials/responses/#sending_output","title":"Sending output","text":""},{"location":"reference/essentials/responses/#writing_text_directly","title":"Writing text directly","text":"<p>There are two methods for writing text directly to the response.</p> <pre><code>$response-&gt;write('Hello world!');\n$response-&gt;writeLine('Hello world!');\n</code></pre> <p>The <code>writeLine</code> method simply adds a new line character to the end. The <code>write</code> method can accept a string, boolean, array, object, or null, and will convert them to strings if needed. Both methods accept an unlimited number of parameters and will separate them with spaces:</p> <pre><code>$response-&gt;writeLine('Hello', 'world'); // Hello world\n</code></pre>"},{"location":"reference/essentials/responses/#rendering_views","title":"Rendering views","text":"<p>Use the <code>view()</code> helper function to render a view template file in the output. You can pass an array as the second parameter containing environment variables.</p> <pre><code>view('index.twig');\nview('user/profile.twig', array(\n    'username' =&gt; 'john.doe'\n));\n</code></pre>"},{"location":"reference/essentials/responses/#setting_headers","title":"Setting headers","text":"<p>You can write headers to the response, and also retrieve them.</p> <pre><code>$response-&gt;setHeader('content-type', 'text/plain');\n$response-&gt;getHeader('content-type');\n</code></pre>"},{"location":"reference/essentials/responses/#redirection","title":"Redirection","text":"<p>Redirect from the current page to another using <code>redirect($to)</code>. An optional second parameter specifies the HTTP code associated with the redirection, and is by default <code>302</code>.</p> <p>Redirections whose target paths match routes will automatically be converted to legacy paths if currently enabled. See fallback routing to learn more.</p> <pre><code>$response-&gt;redirect('/some/page');\n$response-&gt;redirect('https://mynewsite.com/', 301);\n</code></pre>"},{"location":"reference/essentials/responses/#halting","title":"Halting","text":"<p>The <code>halt()</code> method will prevent the current request from progressing further in the kernel. In other words, it won't terminate the script, but it will prevent a controller from running if it's called from a middleware, for example.</p> <pre><code>$response-&gt;halt();\n</code></pre>"},{"location":"reference/essentials/responses/#context","title":"Context","text":"<p>Responses can store context variables which are exposed to views during rendering. For example, if you store the context variable <code>user</code>, your view can accesss it using <code>{{ user }}</code>.</p> <p>To store a context variable, we use the <code>setContext()</code> method.</p> <pre><code>$response-&gt;setContext('user', 'john.doe');\n</code></pre> <p>Note</p> <p>These context variables can be overwritten by the variables sent directly to the views.</p>"},{"location":"reference/essentials/routing/","title":"Routing","text":""},{"location":"reference/essentials/routing/#defining_routes","title":"Defining routes","text":"<p>By default, the <code>/app/routes/web.php</code> file is loaded into the framework to initialize routes. You can edit this file and add your own routes. You may also optionally create additional files under <code>/app/routes/</code> to keep organized, but these will need to be manually included.</p> app/routes/web.php<pre><code>&lt;?php\n\nRoute::middleware('Horizon\\Http\\Middleware\\VerifyCsrfToken');\nRoute::any('/', 'App\\Welcome', 'index.php');\n</code></pre>"},{"location":"reference/essentials/routing/#request_methods","title":"Request methods","text":"<p>In the default code above, <code>any</code> is used to match all requests for the home page (<code>/</code>) to the <code>App\\Welcome</code> controller. However, we can narrow down a route to a specific request method. For example:</p> <pre><code>Route::get($path, $controller);\nRoute::post($path, $controller);\n</code></pre> <p>There are many methods available: <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, <code>delete</code>, <code>options</code>, and <code>any</code>. You can also match multiple methods simultaneously using <code>match</code>.</p> <pre><code>Route::match(array('get', 'post'), $path, $controller);\n</code></pre>"},{"location":"reference/essentials/routing/#controllers","title":"Controllers","text":"<p>For route methods shown above, the <code>$controller</code> parameter accepts a callable. For strings, a full class name with an optional method name is expected, like so:</p> <ul> <li><code>App\\Http\\Controllers\\ControllerName</code></li> <li><code>App\\Http\\Controllers\\ControllerName::methodName</code></li> </ul> <p>If you don't specify a method name then <code>__invoke</code> is assumed. For more details on controllers, see the controllers documentation.</p> <p>Any type of callable works for the controller parameter, including anonymous functions.</p> <pre><code>Route::get('/account/login', 'App\\Http\\Controllers\\Login::get');\nRoute::post('/account/login', 'App\\Http\\Controllers\\Login::post');\n\nRoute::get('/user/{username}', function(Response $response, $username) {\n    $response-&gt;write('Hello', $username);\n});\n</code></pre>"},{"location":"reference/essentials/routing/#defining_action_routes","title":"Defining action routes","text":"<p>Action routes are special types of routes with default controllers which perform a special action. Horizon comes built in with two action routes.</p>"},{"location":"reference/essentials/routing/#view_routes","title":"View routes","text":"<p>If you want to serve pages which do not require controller logic, you can define a view route, which links the path directly to a view instead of a controller instance.</p> <pre><code>Route::view('/errors/not-found', 'not-found.twig', $variables);\n</code></pre> <p>The above example will link the <code>/errors/not-found</code> page to the <code>not-found.twig</code> template file, passing the <code>$variables</code> array for rendering. The third argument is optional.</p>"},{"location":"reference/essentials/routing/#redirect_routes","title":"Redirect routes","text":"<p>For quick redirection from one page to another, redirect routes are available without the need for any controllers.</p> <pre><code>Route::redirect('/original/page', '/new/page', 301);\n</code></pre> <p>The above example will redirect <code>/original/page</code> to <code>/new/page</code> with an <code>HTTP 301</code> response code. The third parameter is optional and defaults to 302 (temporary redirect).</p> <p>Note</p> <p>Action routes will still execute any middleware defined before them.</p>"},{"location":"reference/essentials/routing/#attributes","title":"Attributes","text":"<p>Attributes are extra parameters applied to routes, such as middleware or a prefix. They can be applied to individual routes or a group. This section will explain how to use them individually, and then the groups section further below will explain how to use them as groups.</p> <p>Note that attributes only apply to routes defined after them, so if you want a middleware to execute for all routes, put it at the very top or put all routes in a middleware group.</p>"},{"location":"reference/essentials/routing/#middleware","title":"Middleware","text":"<p>The <code>middleware</code> attribute the router that you wish to execute a middleware before your routes.</p> <pre><code>Route::middleware('App\\Http\\Middleware\\MyMiddlewareClass');\n\u200b\nRoute::view('/home', 'home.twig');\nRoute::view('/about', 'about.twig');\n</code></pre>"},{"location":"reference/essentials/routing/#prefix","title":"Prefix","text":"<p>The <code>prefix</code> attribute the router to assign a prefix to all subsequent route names.</p> <pre><code>Route::prefix('/user/{username}');\n\u200b\n# /user/{username}/profile\nRoute::view('/profile', 'user/profile.twig');\n\u200b\n# /user/{username}/badges\nRoute::view('/badges', 'user/badges.twig');\n</code></pre>"},{"location":"reference/essentials/routing/#name_prefix","title":"Name prefix","text":"<p>The <code>name</code> attribute tells the router to assign a name prefix to all subsequent route names. This only applies to routes that you explicitly declare a name on.</p> <pre><code>Route::name('admin.');\n\u200b\n# The following route will be named 'admin.dashboard'.\nRoute::get('/', 'App\\Http\\Controllers\\Admin\\Dashboard')-&gt;name('dashboard');\n</code></pre>"},{"location":"reference/essentials/routing/#domain","title":"Domain","text":"<p>The <code>domain</code> attribute tells the router that the subsequent routes only apply to a certain domain. If you specify multiple domain attributes, the old calls will expire, rather than stacking.</p> <pre><code>Route::domain('{username}.blog.com');\n\u200b\n# The following route will only apply to {username}.blog.com.\nRoute::view('/', 'profiles/home.twig');\n</code></pre>"},{"location":"reference/essentials/routing/#groups","title":"Groups","text":""},{"location":"reference/essentials/routing/#containers","title":"Containers","text":"<p>Groups are containers which isolate the routing environment. In other words, if you define a middleware attribute from within a group, it will only apply to routes in that group. To define a standard group, use the <code>group</code> method.</p> <pre><code>Route::group(function() {\n    Route::prefix('/subdir');\n    Route::get('/home', ...); // points to /subdir/home\n});\n\nRoute::get('/home', ...); // points to /home\n</code></pre>"},{"location":"reference/essentials/routing/#attribute_groups","title":"Attribute groups","text":"<p>You can pass a closure in the second argument of attribute methods to quickly create a group with that attribute applied.</p> <pre><code>Route::prefix('/subdir', function() {\n    Route::get('/home', ...); // points to /subdir/home\n});\n\u200b\nRoute::name('prefixed', function() { ... });\nRoute::middleware('Some\\Middleware', function() { ... });\nRoute::domain('{user}.mysite.com', function() { ... });\n</code></pre>"},{"location":"reference/essentials/routing/#variables","title":"Variables","text":"<p>Route paths support variables which can be retrieved from the Request instance or from an argument in the controller. Optional variables can be specified using <code>?</code>.</p> app/routes/web.php<pre><code>Route::get('/user/{username}/{tab?}', 'App\\Http\\Controllers\\UserProfile');\n</code></pre> <p>The above code sample will match both of the following requests.</p> <ul> <li><code>/user/john</code></li> <li><code>/user/john/friends</code></li> </ul>"},{"location":"reference/essentials/routing/#pattern_constraints","title":"Pattern constraints","text":"<p>Instead of manually validating variables, you can optionally define a regular expression constraint. Routes will only be matched if the variable fits the regular expression. To do this, use the <code>where</code> method on the route.</p> <pre><code>Route::get('/user/{username}', 'App\\User')-&gt;where('username', '\\w+');\n</code></pre> <p>The sample above uses <code>\\w+</code>, which is equivalent to <code>[a-zA-Z0-9_]</code>.</p> <ul> <li><code>/user/john_doe</code> will match the route</li> <li><code>/user/john!doe</code> will not</li> </ul>"},{"location":"reference/essentials/routing/#default_values","title":"Default values","text":"<p>While you can specify the default value of an optional variable in your controller, it's also possible using the <code>defaults</code> method on the route.</p> <pre><code>Route::get('/docs/{page}', 'App\\Docs')-&gt;defaults('page', 'index');\n</code></pre>"},{"location":"reference/essentials/routing/#fallback_routing","title":"Fallback routing","text":"<p>Routing relies on rewrite rules. If rewrite rules are not available on the server, then routing will not work. Since Horizon is dedicated to ensuring maximum compatibility with servers, there is a backup in place for cases like this.</p> <p>You can use the <code>fallback</code> method on a route to specify a <code>.php</code> file which will load that route. When rewrite rules are disabled, the framework will detect this and will use these files instead. Generated links, redirections, etc will all be seamlessly converted to using the <code>.php</code> files.</p> app/routes/web.php<pre><code># index.php  -&gt;  /\nRoute::get('/', $callable)-&gt;fallback('/index.php');\n\n# user/profile.php?username=bob  -&gt;  /user/bob\nRoute::get('/user/{username}', $callable)-&gt;fallback('/user/profile.php');\n</code></pre> <p>Fallback files must exist on the server and only need to require the <code>legacy.php</code> bootstrap file. The framework will take care of the rest.</p> user/profile.php<pre><code>&lt;?php\nrequire_once 'horizon/bootstrap/legacy.php';\n</code></pre>"},{"location":"reference/essentials/routing/#using_multiple_route_files","title":"Using multiple route files","text":"<p>The framework will only load the <code>app/route/web.php</code> file automatically. Other files in the same directory will not be loaded by default.</p> <p>You can load additional files with route declarations using the <code>load($fileName)</code> method. The file provided is loaded relative to the <code>app/routes</code> directory and should not end with <code>.php</code>.</p> <pre><code># Loads routes in /app/routes/admin.php\nRoute::load('admin');\n</code></pre> <p>Note</p> <p>If you load an additional file from within a group, the group's attributes will be applied to all routes loaded from the additional file.</p>"},{"location":"reference/essentials/sessions/","title":"Sessions","text":""},{"location":"reference/essentials/sessions/#introduction","title":"Introduction","text":"<p>Use the <code>session()</code> global function to retrieve a session instance. Horizon takes care of session isolation and security for you by automatically storing session data under a unique key, and by encrypting the contents of the session.</p>"},{"location":"reference/essentials/sessions/#putting_variables","title":"Putting variables","text":"<p>The <code>put($key, $value)</code> method stores data in the session.</p> <pre><code>session()-&gt;put('userId', 123);\n</code></pre>"},{"location":"reference/essentials/sessions/#retrieving_variables","title":"Retrieving variables","text":"<p>The <code>get($key, $default)</code> method retrieves data from the session.</p> <pre><code>session()-&gt;get('userId');\n</code></pre>"},{"location":"reference/essentials/sessions/#pulling_variables","title":"Pulling variables","text":"<p>The <code>pull($key, $default)</code> method retrieves data and then removes it from the session.</p> <pre><code>session()-&gt;pull('userId');\n</code></pre>"},{"location":"reference/essentials/sessions/#forgetting_variables","title":"Forgetting variables","text":"<p>Remove data from the session with <code>forget($key)</code>.</p> <pre><code>session()-&gt;forget('userId');\n</code></pre>"},{"location":"reference/essentials/sessions/#checking_if_variables_exist","title":"Checking if variables exist","text":"<p>There are two methods to check if a session key exists.</p> <pre><code>session()-&gt;has('key');\nsession()-&gt;exists('key');\n</code></pre> <p>The <code>has()</code> method returns true only if the key exists and is not null, whereas the <code>exists()</code> method will return true even if the value is null.</p>"},{"location":"reference/essentials/sessions/#flash_storage","title":"Flash storage","text":"<p>You can use sessions to temporarily store data for the next request. After the next request completes, the data is wiped. This is called flashing.</p>"},{"location":"reference/essentials/sessions/#flashing","title":"Flashing","text":"<pre><code>session()-&gt;flash('error', 'This is some error text!');\n</code></pre>"},{"location":"reference/essentials/sessions/#reading_flash","title":"Reading flash","text":"<p>Retrieving flashed data is the same as any other session key - use the <code>get</code> method.</p> <pre><code>$error = session()-&gt;get('error');\n\nif ($error) {\n    echo \"We encountered an error in the last request: {$error}\";\n}\n</code></pre>"},{"location":"reference/essentials/sessions/#reflashing","title":"Reflashing","text":"<p>To persist flashed data until the next request, you must reflash it. The <code>reflash</code> method will reflash all flash in the current session.</p> <pre><code>session()-&gt;reflash();\n</code></pre>"},{"location":"reference/essentials/sessions/#reflashing_specific_keys","title":"Reflashing specific keys","text":"<p>To reflash only specific keys, use the <code>keep</code> method, and pass an array.</p> <pre><code>session()-&gt;keep(array(\n    'error'\n));\n</code></pre>"},{"location":"reference/essentials/sessions/#session_global","title":"Session global","text":"<p>Use of the <code>$_SESSION</code> global is not recommended for accessing Horizon session data. This is because Horizon stores session data under a key unique to its root directory, like so:</p> <pre><code>$_SERVER = array(\n    'horizon_5fee0cc5b9a8d4cf13be8b0ce28949fc' =&gt; array(\n        'some_variable' =&gt; 'encrypted_data'\n    )\n)\n</code></pre> <p>However, for accessing sessions whose keys you know (for example, from another application on the same website), you can and should use the <code>$_SESSION</code> global, as Horizon's session manager only allows access to its own sessions.</p>"},{"location":"reference/essentials/sessions/#csrf_protection","title":"CSRF protection","text":"<p>Protection against cross-site request forgery attacks is bundled with this framework, and the middleware required to enable it is included in the stock <code>routes/web.php</code> file. By default, protection is only enforced against <code>POST</code>, <code>PUT</code>, and <code>DELETE</code> request methods.</p> app/routes/web.php<pre><code>Route::middleware('Horizon\\Http\\Middleware\\VerifyCsrfToken');\n</code></pre> <p>In order for this to work, you must include the csrf token in your forms. Views make this easy by providing a <code>@csrf</code> function which outputs a hidden HTML input with the current token.</p> <pre><code>&lt;form action=\"\" method=\"post\"&gt;\n    @csrf\n    &lt;input type=\"password\" name=\"password\"&gt;\n&lt;/form&gt;\n</code></pre> <p>You can also send the token as a header titled <code>X-CSRF-Token</code>, which is particularly useful for AJAX requests.</p>"},{"location":"reference/essentials/sessions/#getting_the_token","title":"Getting the token","text":"<p>Simply call the global function <code>csrf_token()</code> to get the current token as a string.</p> <pre><code>$token = csrf_token();\n</code></pre>"},{"location":"reference/essentials/views/","title":"Views","text":""},{"location":"reference/essentials/views/#introduction","title":"Introduction","text":"<p>Horizon's views are built on top of Twig, and we have implemented an additional layer of parsing to help implement an optional Blade-like syntax, automatic localization, and a unique take on components.</p>"},{"location":"reference/essentials/views/#registering_views","title":"Registering views","text":""},{"location":"reference/essentials/views/#default_directory","title":"Default directory","text":"<p>The default view service provider registers a loader which automatically looks for files in the <code>/app/views/</code> directory. Placing your view files in this location is the quickest way to get going and requires no configuration.</p>"},{"location":"reference/essentials/views/#custom_service_provider","title":"Custom service provider","text":"<p>The default view provider is at <code>Horizon\\View\\ViewServiceProvider</code> which provides extensions and the primary view loader. You can write your own provider to register a new directory by providing a <code>Horizon\\View\\ViewLoader</code> instance.</p> <pre><code>namespace App\\View;\n\nuse Horizon\\Framework\\Application;\nuse Horizon\\Support\\Services\\ServiceProvider;\n\nclass CustomViewServiceProvider extends ServiceProvider {\n\n    private $viewDirectory = '/app/views';\n\n    public function register() {\n        $this-&gt;bind('Horizon\\View\\ViewLoader', function() {\n            return new ViewLoader(Application::path($this-&gt;viewDirectory));\n        });\n    }\n\n    public function provides() {\n        return array(\n            'Horizon\\View\\ViewLoader'\n        );\n    }\n\n}\n</code></pre> <p>Note</p> <p>There can be multiple view loaders at once. If two or more loaders are capable of providing a view file for a requested path, the last one will be used.</p>"},{"location":"reference/essentials/views/#extensions","title":"Extensions","text":"<p>You can use a view extension to build on top of templates, add your own functions, or implement new syntax. View extensions consist of three parts:</p> <ol> <li>Transpiler tags \u2013 Defined tags preceded by a <code>@</code> character which get converted into Twig syntax. For example,    the <code>@if</code> statement, or <code>@csrf</code> function are \"transpiled\" into Twig syntax.</li> <li>Globals \u2013 Variables that are accessible in the environment of every view file, such as <code>$request</code> and <code>$route</code>.</li> <li>Functions \u2013 Custom functions that can be called in Twig blocks, like <code>{{ session() }}</code>.</li> </ol>"},{"location":"reference/essentials/views/#defining_an_extension","title":"Defining an extension","text":"<p>The default extension loader looks for all files in <code>App\\View\\Extensions</code>, so you can immediately register an extension by creating it in that namespace. It should extend <code>Horizon\\View\\ViewExtension</code>.</p> <pre><code>namespace App\\View\\Extensions;\n\nuse Horizon\\View\\ViewExtension;\nuse Twig_SimpleFunction;\n\nclass CustomExtension extends ViewExtension {\n\n    protected function twigKernelTime() {\n        return new Twig_SimpleFunction('kernel_time', function () {\n            return Profiler::time('kernel');\n        });\n    }\n\n}\n</code></pre> <p>In the example above, we instantly add a new function <code>kernel_time()</code> to the Twig environment by declaring a new method starting with <code>twig</code>.</p>"},{"location":"reference/frontend/components/","title":"Components","text":""},{"location":"reference/frontend/components/#introduction","title":"Introduction","text":"<p>A component is a template with a PHP class attached to it. Each time the component is called, a new instance of that class is created. The constructor of the class can have parameters, and the component's template file can access properties and methods of the class using <code>$this</code>.</p> <p>This is a great system for implementing advanced parts of pages, such as navigation menus, which may require the assembly of menu items, calculation of the current page, etc., and might otherwise be difficult to position in a larger application.</p>"},{"location":"reference/frontend/components/#registering_a_component","title":"Registering a component","text":""},{"location":"reference/frontend/components/#the_components_directory","title":"The components directory","text":"<p>The directory to place default components is under <code>/app/components/</code>. For example, to create a default component named <code>menu</code>, we would create <code>/app/components/menu.twig</code>. All files under this directory are automatically registered.</p>"},{"location":"reference/frontend/components/#providing_and_overriding_components","title":"Providing and overriding components","text":"<p>You can manually register a component using the <code>Component</code> facade from the boot method of a service provider. Registering a component this way will always override any components in the default directory.</p> <pre><code>use Horizon\\Support\\Facades\\Component;\nuse Horizon\\Support\\Services\\ServiceProvider;\n\npublic class CustomServiceProvider extends ServiceProvider {\n\n    public function boot() {\n        Component::register('name', '/absolute/path/to/component.twig');\n    }\n\n}\n</code></pre>"},{"location":"reference/frontend/components/#designing_a_component","title":"Designing a component","text":"<p>Component template files have access to all of the same functions and syntax as normal view templates. However, you must take care to write them in the proper format.</p>"},{"location":"reference/frontend/components/#writing_the_component_class","title":"Writing the component class","text":"<p>Create a class which extends <code>Horizon\\View\\Component</code>. The constructor can accept any arguments.</p> <pre><code>namespace App\\View\\Components;\n\nuse Horizon\\View\\Component;\n\nclass MenuComponent extends Component {\n\n    private $menuName;\n\n    public function __construct($name) {\n        $this-&gt;menuName = $name;\n    }\n\n    public function getName() {\n        return $this-&gt;menuName;\n    }\n\n}\n</code></pre>"},{"location":"reference/frontend/components/#writing_the_template_file","title":"Writing the template file","text":"<p>Before a component can be used, it must specify the class that it depends on by calling the <code>@using()</code> function at the very top of the template.</p> <pre><code>@using('App\\View\\Components\\MenuComponent')\n\n&lt;nav&gt;\n    This is the {{ $this-&gt;getName() }} menu component.\n&lt;/nav&gt;\n</code></pre> <p>The specified class name will be loaded in two ways. First, the app's service container will be checked to see if an instance is provided. If no instance is provided, it will construct an instance of the specified class directly. This allows extensions to override the component's functionality without touching the template.</p>"},{"location":"reference/frontend/components/#calling_a_component","title":"Calling a component","text":"<p>With our example above, the constructor accepts a <code>$name</code> argument. With that in mind, we can invoke the component in two different ways. Both of the examples below result in the following output from the component:</p> <pre><code>&lt;nav&gt;\n    This is the primary menu component.\n&lt;/nav&gt;\n</code></pre>"},{"location":"reference/frontend/components/#call_from_a_view","title":"Call from a view","text":"<p>Use the <code>@component</code> function from within a view to create and render the component at that location. Pass constructor arguments after the first argument (which is the component name).</p> <pre><code>&lt;div class=\"container\"&gt;\n    @component('menu', 'primary')\n&lt;/div&gt;\n</code></pre>"},{"location":"reference/frontend/components/#call_using_the_facade","title":"Call using the facade","text":"<pre><code>use Horizon\\Support\\Facades\\Component;\n\n$html = Component::compile('menu', 'primary');\n</code></pre>"},{"location":"reference/frontend/components/#advanced","title":"Advanced","text":""},{"location":"reference/frontend/components/#context_variables","title":"Context variables","text":"<p>From within a component class, you have access to the context variables of the template which called the component. For example:</p> Controller<pre><code>return view('index', [\n    'color' =&gt; 'red',\n    'make' =&gt; 'ford'\n]);\n</code></pre> View (index.twig)<pre><code>@component('example', $color)\n</code></pre> Component<pre><code>class ExampleComponent extends Component {\n\n    public function __construct($color) {\n        $variables = $this-&gt;getContext();\n\n        echo $color; // red\n\n        echo $variables['color']; // red\n        echo $variables['make']; // ford\n    }\n\n}\n</code></pre>"},{"location":"reference/frontend/localization/","title":"Localization","text":""},{"location":"reference/frontend/localization/#introduction","title":"Introduction","text":"<p>Horizon has implemented its own format for localization files, called Simplified Internationalization Templates. This document will outline how to write these files, and how they can be used.</p>"},{"location":"reference/frontend/localization/#file_locations","title":"File locations","text":"<p>You can hard-code localization files into the <code>app/translations</code> directory or load them through a service provider.</p>"},{"location":"reference/frontend/localization/#syntax","title":"Syntax","text":""},{"location":"reference/frontend/localization/#headers","title":"Headers","text":"<p>You can add metadata to a translation file by using headers. These aren't useful for Horizon itself, but may be useful to you with custom functionality or extensions. They can also simply help document your files.</p> <p>Here are some example headers. Each go on their own line.</p> <pre><code>@name English\n@version 1.2.3\n@author The Horizon Project\n</code></pre>"},{"location":"reference/frontend/localization/#variables","title":"Variables","text":"<p>Localization files can also have variables. Again, not particularly useful for Horizon, but potentially useful for custom functionality that you implement.</p> <pre><code>@var \"StringVariableName\" \"StringValue\"\n@var \"BoolVariableName\" true\n@var \"NumberVariableName\" 5200.0\n</code></pre>"},{"location":"reference/frontend/localization/#comments","title":"Comments","text":"<p>Of course, you can't have a syntax without support for comments.</p> <pre><code># This is a comment\n</code></pre>"},{"location":"reference/frontend/localization/#namespaces","title":"Namespaces","text":"<p>Namespaces are groups of definitions. Ideally, you will want a namespace to represent either a single page, or a smaller part of a page.</p> <pre><code>@namespace horizon.index\n</code></pre>"},{"location":"reference/frontend/localization/#definitions","title":"Definitions","text":"<p>After declaring a namespace, you can write as many definitions as you want. Original text goes on the left side, and the translated text goes on the right.</p> <pre><code>@namespace horizon.index\n\n\"Original text...\"    \"My original text!\"\n\"More text...\"        \"More of my text!\"\n</code></pre>"},{"location":"reference/frontend/localization/#variables_1","title":"Variables","text":"<p>You can also put variables in definitions. They will use the context of the view when they're outputted.</p> <pre><code>\"This has a {{ variable }}.\"        \"The {{ variable }} is working.\"\n\"This has a {{ nested.variable }}.\" \"The {{ nested.variable }} is working.\"\n</code></pre>"},{"location":"reference/frontend/localization/#automatic_translation","title":"Automatic translation","text":"<p>Text in your views can be automatically translated using namespaces.</p>"},{"location":"reference/frontend/localization/#usage","title":"Usage","text":"<p>To enable automatic translations, use the <code>@translate</code> method at the top of your view file. You can call it multiple times to enable translation using multiple namespaces.</p> View<pre><code>@translate('horizon.index')\n@translate('horizon.some_other.namespace')\n\n&lt;div class=\"container\"&gt;\n    &lt;strong&gt;This is the body&lt;/strong&gt;\n    &lt;strong&gt;Hello, {{ username }}.&lt;/strong&gt;\n&lt;/div&gt;\n</code></pre> <p>Then, the system will see any matching text within the template, using appropriate boundaries.</p> Translation<pre><code>@namespace horizon.index\n\n\"This is the body\"      \"Welcome to my website!\"\n\"Hello, {{username}}\"   \"You're logged in, {{ username }}.\"\n</code></pre> Result<pre><code>&lt;div class=\"container\"&gt;\n    &lt;strong&gt;Welcome to my website!&lt;/strong&gt;\n    &lt;strong&gt;You're logged in, {{ username }}.&lt;/strong&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"reference/frontend/localization/#flags","title":"Flags","text":"<p>Each definition can have flags which change its functionality during auto-translation.</p> Flag Description <code>i</code> Enables case-insensitive matching. <code>x</code> Ignores extra whitespace. <code>r</code> Turns the left quote into a regular expression. <p>Flags go after a slash (<code>/</code>) at the end of the line. Here are example functionalities of each.</p> <pre><code>\"First text\"        \"It's case-insensitive\"          /i\n\"Second text\"       \"It ignores extra whitespace\"    /x\n\"Third text\"        \"It's both of the above\"         /ix\n\"/Fourth\\s+text/i\"  \"It's a regular expression\"      /r\n</code></pre> <p>This will result in the following translations.</p> <pre><code>FIRST text!         -&gt;    It's case-insensitive!\nSecond   text!      -&gt;    It ignores extra whitespace!\nthird  TEXT!        -&gt;    It's both of the above!\nfourth    text!     -&gt;    It's a regular expression!\n</code></pre>"},{"location":"reference/frontend/localization/#other_notes","title":"Other notes","text":"<p>Here are some other things to know when using auto translate.</p> <ul> <li>It doesn't care about spaces inside <code>{{ variables }}</code> when matching text.</li> <li>If auto-translation gets too slow, consider breaking translations down into a larger number of namespaces.</li> <li>You can also use the <code>@__()</code> method to translate text much faster.</li> </ul>"},{"location":"reference/frontend/templates/","title":"Templates","text":""},{"location":"reference/frontend/templates/#introduction","title":"Introduction","text":"<p>Horizon's templates are built on top of Twig and have been modified to add custom syntax and automatic translations. The custom syntax is very similar to Blade to maximize compatibility with Blade templates.</p>"},{"location":"reference/frontend/templates/#syntax","title":"Syntax","text":""},{"location":"reference/frontend/templates/#logic_and_conditionals","title":"Logic and conditionals","text":"<p>You can perform conditional logic using the <code>@if</code>, <code>@elseif</code>, and <code>@else</code> tags.</p> <pre><code>&lt;div class=\"greeting\"&gt;\n    @if ($user-&gt;role == \"admin\")\n        You're logged in as an administrator.\n    @elseif ($user-&gt;authenticated)\n        Welcome back!\n    @else\n        Hey there, visitor!\n    @end\n&lt;/div&gt;\n</code></pre> <p>Most logic operators work as expected, like <code>!</code>.</p> <pre><code>@if (!empty($text) &amp;&amp; strlen($text) &lt; 5)\n</code></pre>"},{"location":"reference/frontend/templates/#looping_and_iterations","title":"Looping and iterations","text":"<p>You can use a classic <code>for</code> loop to iterate over a series of numbers.</p> <pre><code>@for ($x = 0; $x &lt; 5; $x++)\n    This is line number {{ $x }}.\n@end\n</code></pre> <p>You can also iterate over arrays using <code>foreach</code>.</p> <pre><code>@foreach ($array as $value)\n@foreach ($array as $index =&gt; $value)\n</code></pre>"},{"location":"reference/frontend/templates/#printing_variables","title":"Printing variables","text":"<p>You can output variables or functions by enclosing them in curly brackets.</p> <pre><code>{{ $variable }}\n{{ strlen($variable) }}\n</code></pre> <p>This output is automatically escaped for HTML output. If you don't want to escape, you can alternatively use the below syntax.</p> <pre><code>{!! $variable !!}\n</code></pre> <p>Ternary operators are supported, and only the positive value is required.</p> <pre><code>{{ $bool ? \"true\" }}\n{{ $bool ? \"true\" : \"false\" }}\n</code></pre> <p>You can retrieve a member from an object or array using the <code>-&gt;</code> operator.</p> <pre><code>$array-&gt;value\n$function-&gt;method()\n</code></pre>"},{"location":"reference/frontend/templates/#comments","title":"Comments","text":"<p>You can use <code>{#</code> and <code>#}</code> to define a comment in a template file.</p>"},{"location":"reference/frontend/templates/#other_syntax","title":"Other syntax","text":"<p>For now, that is the limit of our custom syntax. You can also use Twig syntax at any point throughout the template. Ultimately, the custom syntax above is transpiled to Twig syntax in the end.</p> <pre><code>&lt;div class=\"container\"&gt;\n    {% if (user.authenticated) %}\n        ...\n    {% endif %}\n&lt;/div&gt;\n</code></pre>"},{"location":"reference/frontend/templates/#helpers","title":"Helpers","text":""},{"location":"reference/frontend/templates/#generating_a_csrf_token_input","title":"Generating a CSRF token input","text":"<p>The <code>@csrf</code> method will output a hidden input field containing the current token.</p> <pre><code>&lt;form action=\"\" method=\"post\"&gt;\n    @csrf\n    &lt;input type=\"text\" name=\"username\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"reference/frontend/templates/#enabling_automatic_localization","title":"Enabling automatic localization","text":"<p>The <code>@translate</code> method specifies a namespace to use for automatically translating the view. Calling it multiple times will add additional namespaces, rather than overriding them. Ideally, these belong at the top of the file.</p> <pre><code>@translate('some.namespace')\n@translate('some.other.namespace')\n\n&lt;strong&gt;Twig template here&lt;/strong&gt;\n</code></pre>"},{"location":"reference/frontend/templates/#translating_strings","title":"Translating strings","text":"<p>The <code>@__</code> method will return the translation of the specified text. It is not bound to any namespaces. If you think <code>__</code> is ugly like I do, you can also use the alias <code>@localize</code>.</p> <pre><code>&lt;strong&gt;This is a @__('Twig template')!&lt;/strong&gt;\n</code></pre>"},{"location":"reference/frontend/templates/#generating_links","title":"Generating links","text":"<p>The <code>@link</code> method will generate a link to the given path. The resulting link will be matched to a route and manipulated to ensure it points to within the application's root directory. This also will fall back to <code>.php</code> files if rewrite rules aren't supported.</p> <pre><code>&lt;strong&gt;Back to &lt;a href=\"@link('/')\"&gt;home page&lt;/a&gt;.&lt;/strong&gt;\n</code></pre>"},{"location":"reference/frontend/templates/#including_other_template_files","title":"Including other template files","text":"<p>The <code>@include</code> method is a shortcut for including another template file at the given path. The path is not relative to the current working directory.</p> <pre><code>@include('header');\n</code></pre>"},{"location":"reference/frontend/templates/#extending_a_layout","title":"Extending a layout","text":"<p>The <code>@extend</code> method is a shortcut for extending another template file at the given path.</p> <pre><code>@extend('layout');\n</code></pre> <p>The <code>@section</code> method creates a section boundary in a template. If you're extending a template, this will replace a section with a matching name.</p> <pre><code>@section('content')\n&lt;strong&gt;This is my content!&lt;/strong&gt;\n@end\n</code></pre>"},{"location":"reference/frontend/templates/#functions","title":"Functions","text":"<p>You have access to a variety of functions from within template files.</p>"},{"location":"reference/frontend/templates/#native_functions","title":"Native functions","text":"<p>These function calls are forwarded directly to their PHP counterparts, so they work exactly as you'd expect them to.</p> <ul> <li><code>rand</code></li> <li><code>md5</code></li> <li><code>sha1</code></li> <li><code>trim</code></li> <li><code>ltrim</code></li> <li><code>rtrim</code></li> <li><code>explode</code></li> <li><code>implode</code></li> <li><code>strlen</code></li> <li><code>substr</code></li> <li><code>ucfirst</code></li> <li><code>ucwords</code></li> <li><code>sprintf</code></li> <li><code>str_repeat</code></li> <li><code>str_word_count</code></li> <li><code>strpos</code></li> <li><code>stripos</code></li> </ul>"},{"location":"reference/frontend/templates/#helper_functions","title":"Helper functions","text":"<p>These functions are ports of Horizon's global helpers.</p> <ul> <li><code>camel_case</code></li> <li><code>kebab_case</code></li> <li><code>snake_case</code></li> <li><code>title_case</code></li> <li><code>studly_case</code></li> <li><code>starts_with</code></li> <li><code>ends_with</code></li> <li><code>str_before</code></li> <li><code>str_after</code></li> <li><code>str_contains</code></li> <li><code>str_finish</code></li> <li><code>str_is</code></li> <li><code>str_limit</code></li> <li><code>str_plural</code></li> <li><code>str_random</code></li> <li><code>str_replace_first</code></li> <li><code>str_replace_last</code></li> <li><code>str_singular</code></li> <li><code>str_slug</code></li> <li><code>str_start</code></li> <li><code>str_substring</code></li> <li><code>str_length</code></li> <li><code>str_find</code></li> <li><code>str_ucfirst</code></li> <li><code>str_upper</code></li> <li><code>str_lower</code></li> <li><code>array_get</code></li> <li><code>array_has</code></li> <li><code>array_first</code></li> <li><code>array_last</code></li> <li><code>array_random</code></li> <li><code>head</code></li> <li><code>last</code></li> <li><code>abort</code></li> <li><code>bcrypt</code></li> <li><code>blank</code></li> <li><code>config</code></li> <li><code>csrf_token</code></li> <li><code>session</code></li> <li><code>config</code></li> </ul>"},{"location":"reference/frontend/templates/#filter_functions","title":"Filter functions","text":"<p>We also have a variety of filters that can be used as functions. When you call these like functions, they will get transpiled into the appropriate Twig filters.</p> <ul> <li><code>length</code></li> <li><code>count</code></li> <li><code>abs</code></li> <li><code>batch</code></li> <li><code>ucfirst</code></li> <li><code>capitalize</code></li> <li><code>date</code></li> <li><code>default</code></li> <li><code>e</code></li> <li><code>escape</code></li> <li><code>first</code></li> <li><code>array_shift</code></li> <li><code>last</code></li> <li><code>array_pop</code></li> <li><code>format</code></li> <li><code>join</code></li> <li><code>implode</code></li> <li><code>json_encode</code></li> <li><code>keys</code></li> <li><code>array_keys</code></li> <li><code>strtolower</code></li> <li><code>lower</code></li> <li><code>merge</code></li> <li><code>nl2br</code></li> <li><code>number_format</code></li> <li><code>raw</code></li> <li><code>replace</code></li> <li><code>reverse</code></li> <li><code>strrev</code></li> <li><code>round</code></li> <li><code>slice</code></li> <li><code>sort</code></li> <li><code>split</code></li> <li><code>explode</code></li> <li><code>striptags</code></li> <li><code>title</code></li> <li><code>trim</code></li> <li><code>upper</code></li> <li><code>strtoupper</code></li> <li><code>url_encode</code></li> </ul> <p>Warning</p> <p>Filter functions are a beta feature and may not work properly in some circumstances.</p>"},{"location":"reference/orm/models/","title":"Models","text":""},{"location":"reference/orm/models/#introduction","title":"Introduction","text":"<p>Models represent tables in your database. They work seamlessly with the query builder, provide type hinting throughout your application, manage relationships, and can host helper functions.</p> <p>Due to their intelligent caching and powerful interface, you should use models where possible, rather than manually fetching arrays of query rows.</p>"},{"location":"reference/orm/models/#example","title":"Example","text":"<p>This is a basic example of a model.</p> <pre><code>namespace App\\Models;\n\nuse Horizon\\Database\\Model;\n\n/**\n * @property int $id\n * @property string $email\n * @property string $password\n * @property \\DateTime $online_at\n * @property \\App\\Models\\Post[] $posts\n * @property \\App\\Models\\Role[] $roles\n */\nclass User extends Model {\n\n    /**\n     * @return OneToManyRelationship\n     */\n    public function posts()\n    {\n        return $this-&gt;hasMany('App\\Models\\Post');\n    }\n\n    /**\n     * @return ManyToManyRelationship\n     */\n    public function roles()\n    {\n        return $this-&gt;belongsToMany('App\\Models\\Role', 'user_roles');\n    }\n\n}\n</code></pre> <p>Note the establishment of the properties using a docblock comment. This docblock schema is actually read by the framework, which can transform values according to that schema as they pass through the model in either direction.</p>"},{"location":"reference/orm/models/#mapping","title":"Mapping","text":"<p>Horizon automatically attempts to map a model to a table by taking the plural form of its name. For example, a model called <code>User</code> will be matched to a table called <code>users</code>.</p> <p>Furthermore, models always assume the primary key is called <code>id</code> by default.</p> <p>You can customize this mapping by overwriting the model's <code>$table</code> and <code>$primaryKey</code> properties.</p> <pre><code>class User extends Model {\n\n    protected $table = 'forum_users';\n    protected $primaryKey = 'user_id';\n\n}\n</code></pre>"},{"location":"reference/orm/models/#retrieving_instances","title":"Retrieving instances","text":"<p>Models have some static methods which are used to generate instances from the database.</p>"},{"location":"reference/orm/models/#find_by_primary_key","title":"Find by primary key","text":"<p>Find a model instance by its primary key. Returns <code>null</code> if not found.</p> <pre><code>$user = App\\Models\\User::find(2);\n</code></pre> <p>You can also generate an HTTP error if it isn't found using <code>findOrFail</code>. The second parameter is the error code and defaults to <code>404</code>.</p> <pre><code>$user = App\\Models\\User::findOrFail(2);\n</code></pre>"},{"location":"reference/orm/models/#find_by_query_building","title":"Find by query building","text":"<p>Easily search for models using query building. This will return an array of found models. See also the available methods for <code>WHERE</code> queries.</p> <pre><code>$users = App\\Models\\User::where('username', 'like', 'john.doe')\n    -&gt;orWhere('username', 'like', 'jane.doe')\n    -&gt;get();\n</code></pre>"},{"location":"reference/orm/models/#get_all_rows","title":"Get all rows","text":"<p>Get an array of model instances for all rows in the table. Be careful with this!</p> <pre><code>$users = App\\Models\\User::all();\n</code></pre>"},{"location":"reference/orm/models/#properties","title":"Properties","text":"<p>Once you have a model instance, you can access its column values as properties.</p> <pre><code>$id = $user-&gt;id;\n$userName = $user-&gt;username;\n</code></pre>"},{"location":"reference/orm/models/#inserting_updating","title":"Inserting &amp; Updating","text":"<p>Creating a new model instance is the same as creating any other object.</p> <pre><code>$user = new App\\Models\\User();\n</code></pre> <p>On any model instance, you may set its column values like properties.</p> <pre><code>$user-&gt;username = 'john.doe';\n$user-&gt;email = 'john.doe@example.com';\n$user-&gt;last_online = null;\n</code></pre> <p>These changes, however, are not applied to the database until you call the <code>save</code> method, which will update or insert the row.</p> <pre><code>$user-&gt;save();\n</code></pre> <p>After you call <code>save</code> on a new instance, the primary key is automatically updated.</p> <pre><code>$newUsersId = $user-&gt;id;\n</code></pre>"},{"location":"reference/orm/models/#lazy_insertion","title":"Lazy insertion","text":"<p>An easier way to create new rows and get the resulting model instance is the <code>create</code> static method.</p> <pre><code>$user = App\\Models\\User::create(array(\n    'username' =&gt; 'john.doe',\n    'email' =&gt; 'john.doe@example.com',\n    'last_online' =&gt; null\n));\n</code></pre>"},{"location":"reference/orm/models/#deleting","title":"Deleting","text":"<p>To delete an individual model instance, call the <code>delete</code> method. It returns an array consisting of the model's data before deletion. The model instance will be wiped immediately.</p> <pre><code>$properties = $user-&gt;delete();\n$id = $properties['id'];\n</code></pre>"},{"location":"reference/orm/relationships/","title":"Introduction","text":"<p>Relationships are links between two associated tables. You can access relationships like normal members and easily obtain model instances in those relationships.</p>"},{"location":"reference/orm/relationships/#defining_relationships","title":"Defining relationships","text":""},{"location":"reference/orm/relationships/#one_to_one","title":"One to one","text":"<p>These are the most basic relationships. For example, one of our <code>User</code> models could be associated with one <code>Avatar</code> model.</p> <p>To establish this relationship, the model which owns the other should use a method called <code>hasOne</code>. In this case, our user owns the avatar.</p> App\\Models\\User<pre><code>class User extends Model {\n\n    public function avatar() {\n        return $this-&gt;hasOne('App\\Models\\Avatar');\n    }\n\n}\n</code></pre> <p>Now we also want to define this relationship on the avatar's side, so we can easily access the user that owns it. The appropriate method for this is <code>belongsTo</code>.</p> App\\Models\\Avatar<pre><code>class Avatar extends Model {\n\n    public function user() {\n        return $this-&gt;belongsTo('App\\Models\\User');\n    }\n\n}\n</code></pre>"},{"location":"reference/orm/relationships/#one_to_many","title":"One to many","text":"<p>These relationships connect a single model to any amount of another model. For example, a user might have made multiple blog posts, but each blog post only belongs to one user.</p> <p>This works very similarly to one-to-one relationships, except you should use <code>oneToMany</code>.</p> App\\Models\\User<pre><code>class User extends Model {\n\n    public function posts() {\n        return $this-&gt;hasMany('App\\Models\\Post');\n    }\n\n}\n</code></pre> <p>With the relationship defined, we're able to access the user's posts as an array simply by calling the <code>posts</code> property. Horizon will internally recognize the relationship and fetch the posts.</p> <pre><code>$posts = $user-&gt;posts();\n\nforeach ($posts as $post) {\n    $postId = $post-&gt;id;\n}\n</code></pre> <p>Of course, the inverse of the <code>hasMany</code> method is still <code>belongsTo</code>, since each post only belongs to a single user. Be sure to set that properly on the post's model.</p>"},{"location":"reference/orm/relationships/#many_to_many","title":"Many to many","text":"<p>These relationships are more complicated than one-to-one or one-to-many, and will require a third table to act as a link between the two tables.</p> <p>For example, say we assigned our users to roles (editor, moderator, administrator). Each user can have multiple roles, but each role can also have multiple users.</p> <p>To make this work, you'll need to create a link table. If you're using migrations, they can do this for you. Here's a basic link table schema. Note that the name of the link table puts the two model names into alphabetical order.</p> <pre><code>+---------------------------------------+\n| Table `post_user`                     |\n+-----------+-------------+-------------+\n| `id`      | INTEGER(11) | PRIMARY KEY |\n| `user_id` | INTEGER(11) | INDEX       |\n| `post_id` | INTEGER(11) | INDEX       |\n+-----------+-------------+-------------+\n</code></pre> <p>Like in a one-to-many relationship, our user will still use <code>hasMany</code>.</p> App\\Models\\User<pre><code>class User extends Model {\n\n    public function posts() {\n        return $this-&gt;hasMany('App\\Models\\Post');\n    }\n\n}\n</code></pre> <p>The difference is in the role model, which now uses <code>belongsToMany</code>.</p> App\\Models\\Role<pre><code>class Role extends Model {\n\n    public function users() {\n        return $this-&gt;belongsToMany('App\\Models\\User');\n    }\n\n}\n</code></pre>"},{"location":"reference/orm/relationships/#querying_relationships","title":"Querying relationships","text":"<p>In the above examples, we used relationships as a property. But Horizon also allows you to use them as a method, and obtain a query builder for that relationship.</p> <p>For instance, consider our user-posts example.</p> App\\Models\\User<pre><code>class User extends Model {\n\n    public function posts() {\n        return $this-&gt;hasMany('App\\Models\\Post');\n    }\n\n}\n</code></pre> <p>We can call <code>posts()</code> and filter through the user's posts.</p> <pre><code>$user = User::find(1);\n$recentPosts = $user-&gt;posts()\n    -&gt;where('posted_at', '&gt;', time() - 86400)\n    -&gt;get();\n</code></pre>"},{"location":"reference/orm/serialization/","title":"Serialization","text":""},{"location":"reference/orm/serialization/#introduction","title":"Introduction","text":"<p>At the moment, Horizon supports basic serialization. This allows you to easily output a model in JSON or retrieve an array, which is useful particularly to APIs.</p>"},{"location":"reference/orm/serialization/#serialize_to_json","title":"Serialize to JSON","text":"<p>Use the instance's <code>toJson()</code> method to obtain a pretty-formatted JSON string.</p> <pre><code>$json = $user-&gt;toJson();\n</code></pre>"},{"location":"reference/orm/serialization/#serialize_to_array","title":"Serialize to array","text":"<p>Use the instance's <code>toArray()</code> method to obtain an associative array.</p> <pre><code>$data = $user-&gt;toArray();\n</code></pre>"}]}